import UIKit

/**
Morgan and a String

Jack and Daniel are friends. Both of them like letters, especially upper-case ones.
They are cutting upper-case letters from newspapers, and each one of them has his collection of letters stored in a stack.

One beautiful day, Morgan visited Jack and Daniel. He saw their collections. He wondered what is the lexicographically minimal string made of those two collections. He can take a letter from a collection only when it is on the top of the stack. Morgan wants to use all of the letters in their collections.

As an example, assume Jack has collected  `a = [A,C,A]` and Daniel has `b = [B,C,F]`. The example shows the top at index 0 for each stack of letters. Assembling the string would go as follows:

 ```
Jack    Daniel    result
----    ------    ------
ACA     BCF
CA      BCF         A
CA      CF          AB
A       CF          ABC
A       CF          ABCA
        F           ABCAC
                    ABCACF
```
Note the choice when there was a tie at CA and CF.

Function Description

Complete the morganAndString function in the editor below. It should return the completed string.

morganAndString has the following parameter(s):

a: a string representing Jack's letters, top at index `0`
b: a string representing Daniel's letters, top at index `0`
Input Format

The first line contains the an integer `t`, the number of test cases.

The next `t` pairs of lines are as follows:
- The first line contains string `a`
- The second line contains string  `b`.

Constraints

 ```
 1 <= T <= 5
 1 <= |a| - |b| <= 10^5
 ```
 `a` and `b`  contain upper-case letters only, ascii[A-Z].
Output Format

Output the lexicographically minimal string `result` for each test case in new line.

Sample Input
```
2
JACK
DANIEL
ABACABA
ABACABA
```
Sample Output
```
DAJACKNIEL
AABABACABACABA
 ```

Explanation

 The first letters to choose from were J and D since they were at the top of the stack. D was chosen, the options then were J and A. A chosen. Then the two stacks have J and N, so J is chosen. (Current string is DAJ) Continuing this way till the end gives us the resulting string.
*/

// Complete the morganAndString function below.

// Lowest solution working
func morganAndString1(a: String, b: String) -> String {
    var A = a
    var B = b
    var result = [String]()
    result.reserveCapacity(a.count + b.count)
    while A.isEmpty == false || B.isEmpty == false {
        if A.first != nil, B.first != nil {
            while A+"a" <= B+"a" {
                // TODO: here is the 1st bottleneck, on equal strings no need to use
                // remove first one by one
                result.append(String(A.removeFirst()))
            }
            while A+"a" > B+"a" {
                // TODO: here is the 2nd bottleneck, on equal strings no need to use
                // remove first one by one
                result.append(String(B.removeFirst()))
            }
        } else if A.isEmpty == false {
            result.append(A)
            break
        } else if B.isEmpty == false {
            result.append(B)
            break
        }
    }
    return result.joined(separator: "")
}


func morganAndString2(a: String, b: String) -> String {
    var firstArray : [Character]? = nil
    var secondArray : [Character]? = nil
    if a.lexicographicallyPrecedes(b) {
        firstArray = Array(a)
        secondArray = Array(b)
    }
    else if b.lexicographicallyPrecedes(a) {
        firstArray = Array(b)
        secondArray = Array(a)
    }
    else if Array(a).sorted().lexicographicallyPrecedes(b) {
        firstArray = Array(a).sorted()
        secondArray = Array(b)
    }
    else {
        firstArray = Array(b).sorted()
        secondArray = Array(a)
    }
    guard let first = firstArray, let second = secondArray else { return ""}
    let result = [first, second].flatMap({ (element: [Character]) -> [Character] in
        return element
    })
    return String(result)
}



func morganAndString3(a: String, b: String) -> String {
    var arrayA = Array(a)
    var arrayB = Array(b)
    var result = [String]()
    while arrayA.isEmpty == false || arrayB.isEmpty == false {
        let ca = arrayA.first
        let cb = arrayB.first
        var c : Character? = nil
        if let ca = ca, let cb = cb {
            if ca < cb {
                c = ca
                arrayA.removeFirst()
            }
            else if ca == cb {
                if String(arrayA)+"a" <= String(arrayB)+"a" {
                    c = ca
                    arrayA.removeFirst()
                }
                else {
                    c = cb
                    arrayB.removeFirst()
                }
            }
            else {
                c = cb
                arrayB.removeFirst()
            }
        }
        else if let ca = ca {
            c = ca
            arrayA.removeFirst()
        }
        else if let cb = cb {
            c = cb
            arrayB.removeFirst()
        }
        if let c = c {
            result.append(String(c))
        }
    }
    return result.joined()
}

func morganAndString4(a: String, b: String) -> String {
    let arrayA = Array(a)
    var i = 0
    let arrayB = Array(b)
    var j = 0
    var result = [String]()
    while i < arrayA.count || j < arrayB.count {
        let ca = i < arrayA.count ? arrayA[i] : nil
        let cb = j < arrayB.count ? arrayB[j] : nil
        var c : Character? = nil
        if let ca = ca, let cb = cb {
            if ca < cb {
                c = ca
                i += 1
            }
            else if ca == cb {
                if String(arrayA.suffix(from: i))+"a" <= String(arrayB.suffix(from: j))+"a" {
                    c = ca
                    i += 1
                }
                else {
                    c = cb
                    j += 1
                }
            }
            else {
                c = cb
                j += 1
            }
        }
        else if let ca = ca {
            c = ca
            i += 1
        }
        else if let cb = cb {
            c = cb
            j += 1
        }
        if let c = c {
            result.append(String(c))
        }
    }
    return result.joined()
}

func morganAndString5(a: String, b: String) -> String {
    var i = 0
    var j = 0
    let other = a < b ? Array(b) : Array(a)
    var result = a < b ? Array(a) : Array(b)
    result.reserveCapacity(a.count + b.count)

    while j < other.count {
        let ca = i < result.count ? result[i] : nil
        let cb = j < other.count ? other[j] : nil
        if let ca = ca, let cb = cb {
            if ca < cb {
                i += 1
            }
            else if ca == cb {
                if String(result.suffix(from: i))+"a" <= String(other.suffix(from: j))+"a" {
                    i += 1
                }
                else {
                    result.insert(cb, at: i)
                    j += 1
                    i += 1
                }
            }
            else {
                result.insert(cb, at: i)
                j += 1
                i += 1
            }
        }
        else if ca != nil {
            break
        }
        else if cb != nil {
            result += other.suffix(from: j)
            break
        }
    }
    return String(result)
}

func morganAndString6(a: String, b: String) -> String {
    let pattern = "^(.)\\1{1,}$"
    if a == b,
        b.range(of: pattern, options:.regularExpression) != nil {
        return a + b
    }
    var A = ContiguousArray(a.count > b.count ? a : b)
    var B = ContiguousArray(a.count > b.count ? b : a)
    var result = ContiguousArray<String>()
    result.reserveCapacity(A.count + B.count)
    
    if a.count != b.count,
        String(A).contains(String(B)) {
        // a: "ABCBA", b: "BCBA"
        if let li = A.firstIndex(where: { (c) -> Bool in
                B.first! < c
            }), li > 0 {
            result.append(String(A.prefix(upTo: li)))
            result.append(String(B))
            result.append(String(A.suffix(from: li)))
            return result.joined()
        }
    }

    while A.isEmpty == false || B.isEmpty == false {
        let ca = A.first
        let cb = B.first
        if let ca = ca, let cb = cb {
            if ca < cb {
                if let li = A.firstIndex(where: { (c) -> Bool in
                        cb <= c
                    }), li > 0 {
                    result.append(String(A.prefix(upTo: li)))
                    A.removeFirst(li)
                }
                else {
                    result.append(String(A.removeFirst()))
                }
                continue
            }
            else if ca == cb {
                if A+"a" <= B+"a" {
                    if let li = A.firstIndex(where: { (c) -> Bool in
                            cb > c
                        }), li > 0 {
                        result.append(String(A.prefix(upTo: li)))
                        A.removeFirst(li)
                    }
                    else {
                        result.append(String(A.removeFirst()))
                    }
                    continue
                }
            }
            if let li = B.firstIndex(where: { (c) -> Bool in
                    ca > c
                }), li > 0 {
                result.append(String(B.prefix(upTo: li)))
                B.removeFirst(li)
            }
            else {
                result.append(String(B.removeFirst()))
            }
            continue
        }
        if ca != nil {
            result.append(String(A))
            break
        }
        if B.count > 0 {
            result.append(String(B))
            break
        }
        else {
            break
        }
    }
    return result.joined()
}


//
import XCTest
class MyTests: XCTestCase {
    let a = "EHNYCHTZWXSQQLVTRXTDZWOQDCJSCVQMZBNGYNLYMJVGCGGPZTZAWEZYXDEJAKZTHEIOXRIUFHVPSLQFGSFOBWDPZIXWHXUVMDWUXYIQRQPUOUAQNZSGWKWMGZFMSAAYNEGBEVLSZWUOAVKYITLQRFXZRGCIJUSNLXRDCCSOKJJSWRMGPCOYYWDOADHPWFRDDOSPLJTUFFHWIGJODUIJFMDVQBDQOLDWIPDWKXHEUAQZTBDSAQIPBEMYATVUJFWSYGDPRIWWAKJDDOWUOZINGZTANILADLQNIGXLAAQOZKTFYBMMIZXBMKPYOTUXIZDZJUJJRJGFTWGLEZYEITSEMQXWXOHCKGWMACWEBTCOWNTWHUAERULYXYEVXXIYXJCWKUZIKRKLYEUTZRGAJOHMDKOILCQUZAIJWTOHFYUDIROBNFPUPNHLJXLPYWZTVPOVTEKMRDQSEXKERABUSOFSHPSZBMKIJLGHDCKXTRPJTAWANWMDCOAOGQJGJJQLXLKEOPWYMOWYSQEQVBZTYLDEQDRUYRQXPFTCYHJWEMTGMHSDXOQHDYMJELCXTMLSDRSICVIJYCONYHYJWYNHATQILCWSBQRYEAMEYQFQESNBGOKUUDJQKZMMTOMJGZPWMMNUVKXWSQIINRPJXBYQENUOWKJXOZLGPVZISIFWYBCUQRDDNLUCTVRPDIOEERWQVESZOOSOBJBJCGOLSZPNRNALICUQUVZHSISJSICGZKZXGMNJCRWJNAEMRFIKVEMMVTSLBMSLWUJSELZGMASAAXJLGIPMINUCINHJLWFQKFJIPTYKYXUSGCAKRRYXDWGAPTFHXINNHHCVQKHEGSWDYUOWGIWBLKNHMVADYRBCMLOUYRFUATLRWNVYRYNEYLPGDFIDGMFKCFXPCPDPGZOGICCOVRHASWPZRCDGIEYWNPHFQWPIBMVPRKEIKDGCQCKSIXQQMBARUXYAVEOGFVIRADTNMBXYTGYOCOFWSBRPOIXLCVZTIERORPCJXGRPHFMTDJEELDNFTLNKWPCJKHGFRVQMDQDQJPRNTTEKGYDVKOQIGIQGLPUHVGRXXTXNASXZSGRZDCSYSECAFPMGYPGOKMYHBQPFDQLTDFMVYTLEFZFANDHODFODLSEEFXVVFECAIQHBHQCOFXXUJURJALLSDVMTFFWFVMURVFGSPOBUAPHECCYEVIUDPXOAAGWPJDGXGFDAXFRAWWJUGQRWAUMKLYFCMIZBECTDTLQCNMSFKOCCBXHUECJHSZGQMGIXDDMQHFMJFOYQANUAGIXWPOFABJVZBFFAJWXDYRQHYHDOCIFLNLUXZIWHYSVHMBSHPQOFKUYYORFCSBSCHICJGBHUHZRPMSIOXOFZTQYSXJYKZYHRFSYUAUXTRXBMZBVGQYDIXPKRWIIUXOAPUSVRVBTWUUWDQMVYTRWTXGUQVGNTPUTFOMPULYNTEMFIBURWTMUGLKFKTRHWQYORCCPZXSQMHMUFUNBTVVQXCJDHEAEOLKIWWDATNPZRKZKHRDLLEOZBNNTKBWCRFYGKUSMVJJQJPLIVRZLCEGWARXPCTWRCYNGXSZKOINBWRFIQMVMBSIWLFAJJOGYFLEQZTRLDKOSRDBJBBGCENERHXNWUHSSTKLCBHLLLWOFGMSQADVTQREFAMBFVKWPQJCQBENHZWNNAGDFPDGWXSZDJWXHIRSOFGUPULDMREIERSMRLIZXRPCTYMHXDMODPKCZSTGUGGBPTOJPTKYMQQEJQAJCAJRTLVEAWWJSMFSOMIPICKCQASTJKHFLWFDNMZWFWCDTSDYVFFVTYQAXWKLCNKLNVYXQPUOOLHUMMNYRTYROGQKBUZPZWNBVDZWEHQRGNAYDPIQQFZWBQJMTZPETCCVRAHCQRMGBMUMJRLCMMRQVEVQRZXNSGVEHDJTFKARJIDYLVUZXCPIZRFBRQYGHCSODWGYBJZASEPRTVYJTRQZKPWABJPZLRYZGTIYXXKUGEPOAGJTFTPDVYYPUAFZKVZMDYMKQUYGSJXBFPBYUXZAGHLVTSUVRPROLTTMRTIOLSWVIDGPUWABDNIMBUJFPXGJALVKIKACLFBLYNUXVOZPLXTGSOXLSOLZAMJBTULOOVQXQEDZBYPEKOMMVRTWPKUYPLPGJPDPEPGRQVWWCGZVCJLMLMSVNAQVCGQJKGUQLZWKRODZVSOHVNORSVXWIIYDZIAOWYRNALTZGQQXONIAYONNUCCEPBTOURSHZMDYDVUEWVOKRDSMWNRIULIKREOSEFNWCZIBHXHAJMWXLPBOMQIHXESUTALQDOPRQOPTEVXPVIIGWPULOEFDXCVGRUTRRUNTKUIZSPWFNUNDZTQXDPPCOSQRXJASFLQJEYTTKSMQPEHJMRJDUUFAQUHGLQEONTXFVHTIKRKCBLVXRLOAVDXMZRVHQKSAZQHBEMQIGQXTTCTDFERABGJORICJQYUGEQCSRYGHOSJXBYMTTKGPNMNTQRMRNKDVWNTBXFZUMZHGJUTCKKPYHLNRJPHTWXWVJTFXJNTZVWQQNZKIVUSQOTFSYGLJANTSZTLWPLMVCZBYLOBQVUIZVPLBYGFAERMWJVWIYZWORLVCXILQNLZYOSEMDUFJNVWQHMLQJQYCACZPRIRMHVCTCOSQDOPEPILXDMFNZBUSHUPUTDNZFZMNCBBMWRROKIXVCIYBEACLYFORTKIRAHNVXIDMCVEFZQYFIWTDEGJFEVJWTCUNTQQPRVMOLMMUZWMLCEJHJHPCJKZAZYWPWWTLOQBUXOQIJJPLEEAVAODLRYHSWYKJIJEWEQCXPLJDYQHSEMRRZIWYDNHQMNBNYFXPYRBEYOUGYKJGKKBLIMKGHZIZXXKDZMWGQYEHQNINKERCUWPVULZLOWRSQXHGNYKESNFIZDVANPXMVMQUKCYRIJRRCZKPWPLNPBIHQAWIJWEGPKHRXAVVRYRIDGWZCVMIIKUTQEBUNNEWBWVHWDYQBMTIIVFBWYWQOHPPBUCKGBUMFEOWXYNWEJKEYJPBUTWLIBJRQULVWSOHHUZYWZOBTYRUAROBWJXZIXTVGLNKKFGAAYRIQLBSVTNRREGIXKHXBMEOMSIDRYEMUFZTMSYZATTGXJLOXPLYJNOJWPIJJSNFXBENJNILQZKDGTVRUCKKTBYMQLDWVZJCTTKEAIVOVPUSNXPAMIZSSTYJQRXWGCHKNUIDRGBKLDQQOEHVEVRLCKQGRFRJWLHURSNBHHLAHJXCHHPAPGKNMERSLFNFAVXHZMGADMKSFPEQWCMNADVYHMHAMZCCZXCSQRUJNMKLWNCOQGRANWRZGWQYPVHNFQOQIXNJMOSSWNXZUZQJULNHZNMYMZDJZFHIVAGUPZYUTRAEROCMXGMMPTZXDDRWMBPVJOWUQUBWUHOKHJBSPVYTVVNIHGNMBHUBZTYCSOVJTKSBRJTAVCILRFUHAWORDCGHODNRMRXHGNPBAMXFADHKAIFEWACDSXLDWAOZQDOOZYAFIEDWOWKSTSWVSKJGMGGPNDRITPAQCKLYACAKXGQMGSFHEZNBWWBCJNXBAPBBMVXNPKDRVZKXGJCXOXUJZZMZIKBVZVOZUJPWLKBSGGWBOISHEHLWEKRONPVHLWKCECXXLDRVRRDXDOLTPHIKIXUPSCXTRSVBWNQPSQHOBAIFDAJSTYVIDREDDSAHXEUSWAOMMTSGGUKSILWKYMKLHWZAPBMLEVHVWCYPYKQPIHENOTQJNNSIJAVQEUWFFMVZJNCVZMVEJDGUMBWZYNJBOQMAWBVNJXCZNLMUFRJQPWHBAPDQXGUADKOTAWHYQQHRAUFLXRTXNNKXYWZYPCMUVOWBORZGOUZHBVVKYPTHHDCZDRPNKBUKSTAEIOFEBWSREMPCTTZYDUCHYWRLSOBGZOQUZFDZYLWQQSRZMIXHWWRAMGIMUXWOZXCIRMGXPQINXNVEZTZAELZEHNKSERZHEMKRGXBMKJYMDVYAUZYRTNFQEZIBGUVYLKTXCQCNEUSFMGQRUQNMQZEZYDXIMINYFPLYKJBHQKONMZCKTXSVPWYJVUSZBGNFGFETFWYPJOYCOUKTBGCUSAAIEJEMISGJVHAFYKTRELMEZYXELSYWKIKZMTJKQDQRPVPKBNCDXNSKNYMGYCCTXONNMLOATKJSGEPQUWSWRXVZMQTINKXFPBLKIUHSSFEBPSHDVXRJNWZMCQTZFGODTBKFUTWGQCASNARKZVSAJZMWRCHPOXDPTLZVZXBYJVZDYMXUJMAFNARTSKCGZVMHFHOQDNUFTKGOJBJPIIIAKBHPZUFCQGVFUZYKMEIYEZSGDUXDCHDNUJCWDCLFAVSNWHZWWQZHUYWOUSAPXOSOXDVOWQGPUKWBLJGNOQPYOBXFZAMKJCVITKOQGWBTCSFMFJAPXUAENMSGVLXWMPVOIPCGMDQRBPNOJPVRQZCWNYMHFQFHPDLMCZNSWKRWSIWPXPYWVJAAUSFGJQUFGZTCLXGVGRKLMVTPZNCEBLYEKYYXEGVFJSDDFPAUIPISFFEXWJOXHGOYDXCHFASQHCIUGBHRIZKCEZQMYVRWGLUXCPTVMPEWSWYAMSZWDZNFWAAKRRDCKVWQNAFQCTCPBPURDODHWMKJXNAGWYHVNZMVPXHSSDHSATBVZGCXBYCMMZSARMRANMTGMWDFUFNJDVLVEQSVGZCKYFJYCYVBYFXOCQCLZKNCTJXKIJWXXXOXZGTNMDLPEXWTFFHYYGVIGAEQITLKEGBYEHIMTZVLFBQNRFKAXJKMUGDWCNBMSWEIKVGPNXMXIMBBFUWYJWDAZCXICWPXXHCHONTWEAOYJGQWYOKYJXOQTUFKDXZWLDUSCBQCJCSYCWRAEXZPCUKHNCAQQBAVFWUEGKTTKRXDGKAXHFAQQUGUOCYSENIDFINGGKFHRDFSGPRCNRMJSQGLGEAGRYVUEBKNPCHPJARWLVAMWXKLLCIEVGLQURKGELWAVMOEAQPTETSXDIWHTAWUHYDSWPBSBXSMILPGRJOKFWVFRYLLDZSNEODKXLCUBVCPZUMVCRMOKTLZWLUBDFVXDWXJQAFTGWPRHKSJVUHFEECTVSVSQWPFUBKNOEUWBEAYTWZLEBCFSBEHXRDGRVKDTBWBGEFHRWEYGLVOLNNDRVEYZFAKHEMLZNXIKCXOMMMNKKPEDCQAMNPHJZIDPYOFCZSAEXSDKCFADQPFNZOLXXPWHZQXZFEPXKVVZBDNFGOECOEEBGQKZRYZVNRRMACXGCZIKRXZFCPREJDGWDGDQWAUONDVIZUAHGWOEKFHZYFFWYGTTUWTHZMOSHCOAZAUQVGXUDNBDKZXLFRLJOOBBZWCJDOJVRQDZHOKWRGUIYLSXBLOYLVFCQXSGFKKNKCCRUYKHVSMMEGRZQUPOSCPCPXULPVHHDLJVKBZEQXPDELQYHAPNXPODAIXCHDDEZXSNHXFJRVYKYHPWWXIKKADPWHYECYZHRCPETXJRPVCJZTJAMTEVEWBOJJIHLMFEKRSFWOIHDPVWIEDCDCCWFXCUQWMVCSALZCFNSIMPAMPXPFFLJLQMOUKBMJPRCPZKGIIQRWAGDQHMBGRUNWCNPEENIMDFHNIYESXOCNODZHNWGWKDYNLRWVDGDCXZJWJFJAYOYMKGQAUGOUNOBMOXHYXIWXDTRRVZYONYDMCGXRXCSWMTFRHTDEPHAWRSHCFFJHQCOXIKFJDUKZEEFDUVMKIKWQFGEIRDRDCKNOOPZBVSVJMVCEIIHBWLPZCHICDXFYLWOTQNZOUEJRWXGEYUJKXYOHVQHOOLCADPQWCMKDZFCVVKRZOPUMAQYTWTNBLYIPJGZAGAAUZHMBNOAJWGVDUERVYKSCJTDLUZMURSWCBMBCWOMMPRDENOWUVGYCMXGKQAPOJWHVJXDQSTIVXEQQFFHRRRDIYOYPBXCHHASFSQNOXPMECLWXLWDVZNRBZPKQKWXEYBUYJIDSBHXRHANOMYGJLBXQRKXNDAYAKYYYFFYOPYURLNXTWUHZERXDAGNZICBABUDCUHIZOTKPAUUIQCWSXJKHBCYEEGHNWGJYKKNFMYXJOGGBJUFYMZUTQSZBIXQJEWXMLUUBTMPADMKMTPNRHCQZGKJMCEHNECPCNMNBMGLUSTXEYMPRWQSIYOBVQACAYHEGZZBUQAETEGHBNEWWEHJIEEPGHTPLCCWTFTRNGJFDNYZUFAZHROOTIEKQHRDDBOQXMYZMWUPDRCJYBIXGPRVUDAIXJKUSYSSGAOQCOAWXDDDGNRNZQBCOQVLENHJXLWJGVFNKLXUJYEOHJGFAMGDNZCANNYDNWBBZWGYHAPSVUXERUJRQPUUDXJBCQZKJRUFCDNRSRZZLNOCJJRQJORFIBXKCZBZKCVIVZJXMBUCOPUEICSWINZGHNUGLEAZMJRTKBEDI"
    let b = "XTGNVWTPXMSKFJVFTKRLYSUHJHDDYHWWRNPMUEJDLUZIOYQGPDSHYIFPXPCFWRLTGMNWVETLCHLZCGIFAKGUQNCTISRVHHAJZZATQERCUHRBTIDGRDTDADKRVLWAWKXOZSWSXGSUDFHINWAYZIVCLLPQAFCYGCVKKUGFUCPTDCBIEFYWDQLZBIWTSMDCWEGHXCEMAVAOGHRBTDPYWVZJAYBRSBBNVMEVJPIDCPPAFOXBOBBYETZUUIMGUIHWYTHROOQUSDHZKLLVQPNNFFZFQTFQNYLKCDZTDIUHKBQYHAQCPGXOQFFFQLEAEBVYCADCBKDWSSPEPFYZVKWLWYGOMJWRFOJQTOZBUXTHMEVNNZBDARRJUREQPZTLZCRSARAMDCESBASPDDCHKHUFFRFHHRWLHIZBARDVXRITNTTRWIABSICXREDKYJMRREBSRYRRUZRUPDYSDBFSHGSJHUEDPBNTSKSLZUTTDUFQLBVQDNMQZTJWUERNMKCRLFOAVHZFXHZBJEVXEIFJAZURGVMBFYJBJQNFXFMOHUZTQSDUELIUOYOGFEZMLYMPJCFJIOLRZSTTWTTWRBZJJDAJQAONMLYZBIEDYUZMQPDGVKEBYTJFEIYTVFTDGDKLDUFLPMXHNSDMPURWXXMEDCZBYBZEIVYDSAMPHIFVWDMHOBLOHUMEZBWZDJKGMRBCNJNWSBATONEBZPLTMMFDGUZWCOAEOXSATWYADHYZQZJNTKMFXUTDCRLLPLHFRZQITITDZTNEYAVUOVSNRVZLODUYMENXVIYNBNHDIVFXTPYCWIWGAGVSYTKMXAAKSWVJWQQUAFOUOJHTBWFBTOXXQFYXYDRSAAFEJGUKVBPNXJUGPBAEBDDPCDXNJVUWDUFJYATVDAEVTGVALAIZNJNOTZVUMPPPEJSDBUHOVLYDVLUTQJRPBJLILDSOCZYZSJFOHYHUFCYDYYTFJWIBIVJUAHCFPJPCDYDFEXBICTGNIIBIGNWDXJIQHDCYFADTJYSDGCHFUVJODFMPPOUPEWQUQFBWHJYPYXNEHKJYDVCTWUKZGNFCMAXWRLXJOVUCGVYYLAHNCNAVRXFAYWLFWEGXOEATKJBQEWDCKXLCYAQGELTISLJNGNDMSDIEGTZDJEIVYGKUITBMTDEQNARMDWBLOSQORWPUKJVJDNASJKSQIGCVHDNWUVCBYUNRSILMPVBBBYZCGEZLXKIBAEFSXOCWGPBKUCANOGYPIMRWQZHQCVMYQGXXBQJQEKMGDZZZRRCPMDEDKYXLZQOUDPEZVQWAIXDNBQHIRWPBFQRVHHKIWCNQKYEXPLNVMBKZBBSHVWMTRJSWGFTSZLDXSXUCSMPRPIILOXBHSPXZYDDLYUQNCLNFUVVOVPKWOCGGRZOEQAFPFQEFOKMITPTWQOJJQOAFNDYPPWSXVBVLQPDURHSOSUXKIHBICWYECZJWOSESPIERXVOWHVQFFDPSIVWEMCODLUKPJRYVLPZOPLGWAWPCRWSJTQJFHNYVRUKDMWHXNWFWNORKXITBSGQLKOJXONGPCJUHYKSCRBOOCBPBSRNHEHKSIVFHRBKTOVZTYIZPOAJZKJEXUCTUIMFTHNSGIVQTCXACILYTKLFLKBOCXHKLRFCLJMAMUCCOIXLAATDJTAMAVMWLHZXZFRLQMCYUUIVYWCLVSOWMBJFPZDEBSCWMNPLCPVJPLCLNAMLJWXOBZKWVXZUSWDCVEMEYCXKLKTIGXGXAORRISJTFSMYUUKOELSWWZLQWXWTKFIEECPXJXKFFQXGCFCHUHJNOBZHPIELFYLSCCDEKWOVZYWBMNUYZYBTBYKEJUAOLVGHVYSLHGLJKFONWUSRVSKYYIQULSXJDYTWKQZWWMKTJZDAPWXHSYNXFQSABTUULKDWRADFZMUDWNYYSXOFUYJAGWSXHEWLAPPZIYGAVYNOPQQRXGXQBURVMCENONTHCRRJTETDCLKTCDAOMRMJJKSRHBQRDDUUNQTYFGYMKKYOJOZPCTTRUPJBSVUAWDRLAOCRWQUHJIRHOEEUZIUJCSUXZCUDDLJPKIJDKHKBSADRUYGFZOWPUIYEIKMPTCQRHRSERZEYQLCKOYAYRVSKQZXWEDWYHZVQTZSUUMCWNCCIYHZPOTWBJGRAJQYXSEOEXXSOXNJKIHPPOSYVOOTASCHQGKGJKGLYJUOMWPDMXAJAUXCWJIGMFBNRGPYNTODQWFLAMNMDUKFFETUAMQDJBKJELHSYIIOUAGJBWVXIAXEDYZHRJZFDEQKFRCMHKTYCLPZBDMJHSQKDJFTLPAWROLJWGBWMDUIBQCBBULBOQBUELSLXVCMKNKNQJSRGKPVTICAVOQHUGGQKVDLLFJXAVEJEZVTUQHIPZOIMOCMZHGZCWWTBNFTWIZWSMNLENDMKNDVHTOPHRPTKQYMTRMCPBCXFOSASJGBVHNZYPDVOGFBAAACDAWYGFEEJZGYHVICHFTOOFRNQBWFCEXFBMTNWVBYZEZGLQLJWPKGIVMWNFYPCOEGKXXDODGBLOERJQNBTYYZHEXAPQANLKNISBFOAXCMIXTJKHFEALTBWPCZLWTHNQKQFUBORZELFSIKNQNNPCVCMERRLZIZJAAFKKJTAAKTIZAOLEFOLJWVOMSKDWKBKYSMSIOVKNWUVWXRIFMOQLZGEKQXMMSFNKBMRWTOQHQTDMICVKJPBUUAVAQRUZBHRACXSUVHTKNUCZFMXCXWJGSLIMPNGKSLUHTMZSGOHKVYCISVOFHKIQVFFHXFWXHPRRIVQNDYZBIKRHLIHBNAGDFXRTNPAWEIRBSDKGHQIZVVJCWMATJNGJDFWJYAIIAKVCKERNWKWQPAMCEVIGSIAYDBXWWKVBDYIAZLCZLXJNRKCYDWTRSAQRXNMCUKBMZIONMAUOZCYXQCSQIZNGTCMAFEDMHNRBXVAMDONIHHJWUWMKTDNBJLYCOTFAIPXCMFFUDZVUJUJQWHSXQWJZVZSLOCABVMVMXOEXPSTRNVBSUDFVABUTQYTNZDKIMXKUGGSOXODTUITPTDYBXMOJZLDZOPCNDVGQAMBAGURQCXQSUEHZZRDTSCUUNDTEHNFARXAPNHNHLQLPLTVVYYBKEWAOUDTKSMXRQTIDEWVQZCBSHMQWJPFXQWRVDFSQULKVHAEFRABFMAVKJQIHIURRCIOCNFFYKNQUCJPAROWBESUKYEWKLPQGDZFFTKWHBGRXELNCERMJNNDUKVWDTZPSKDMFSGJOOQKBVQRSNLVNCJKEICCRUQTKLBVGYGFLDERSDDSKIRVHYYABZQAKSBUFLQOSLMYWZOKOABPMBFUHWTYGTAGKOMTBNVJGTXDOJRXEVKVADIZODGLXNZESSLLRXNFKJVQKDNIUNJPOFWWZBWSNKQKJMDRWGPCFAWKYKZWUDQCYDSXSYTJVEOVJZOGCNQYOLIMWBFZAJIWOAXENANJVQOLMVLTBFCVHKFGHVSBQUBUGZSXLLSVCVFUXYPPKYRNIXJTAGJMMRQNQYFMRROKIUSIWCWCAPALNMAGGKVQAOXBHOOAVGPZJFXWXGMTLNHPZSM"
    let result = "EHNXTGNVWTPXMSKFJVFTKRLYCHTYSUHJHDDYHWWRNPMUEJDLUZIOYQGPDSHYIFPXPCFWRLTGMNWVETLCHLZCGIFAKGUQNCTISRVHHAJZWXSQQLVTRXTDZWOQDCJSCVQMZBNGYNLYMJVGCGGPZTZAWEZYXDEJAKZTHEIOXRIUFHVPSLQFGSFOBWDPZIXWHXUVMDWUXYIQRQPUOUAQNZSGWKWMGZFMSAAYNEGBEVLSZWUOAVKYITLQRFXZRGCIJUSNLXRDCCSOKJJSWRMGPCOYYWDOADHPWFRDDOSPLJTUFFHWIGJODUIJFMDVQBDQOLDWIPDWKXHEUAQZTBDSAQIPBEMYATVUJFWSYGDPRIWWAKJDDOWUOZINGZTANILADLQNIGXLAAQOZKTFYBMMIZXBMKPYOTUXIZDZJUJJRJGFTWGLEZYEITSEMQXWXOHCKGWMACWEBTCOWNTWHUAERULYXYEVXXIYXJCWKUZIKRKLYEUTZRGAJOHMDKOILCQUZAIJWTOHFYUDIROBNFPUPNHLJXLPYWZTVPOVTEKMRDQSEXKERABUSOFSHPSZBMKIJLGHDCKXTRPJTAWANWMDCOAOGQJGJJQLXLKEOPWYMOWYSQEQVBZTYLDEQDRUYRQXPFTCYHJWEMTGMHSDXOQHDYMJELCXTMLSDRSICVIJYCONYHYJWYNHATQILCWSBQRYEAMEYQFQESNBGOKUUDJQKZMMTOMJGZPWMMNUVKXWSQIINRPJXBYQENUOWKJXOZLGPVZISIFWYBCUQRDDNLUCTVRPDIOEERWQVESZOOSOBJBJCGOLSZPNRNALICUQUVZHSISJSICGZKZXGMNJCRWJNAEMRFIKVEMMVTSLBMSLWUJSELZGMASAAXJLGIPMINUCINHJLWFQKFJIPTYKYXUSGCAKRRYXDWGAPTFHXINNHHCVQKHEGSWDYUOWGIWBLKNHMVADYRBCMLOUYRFUATLRWNVYRYNEYLPGDFIDGMFKCFXPCPDPGZOGICCOVRHASWPZRCDGIEYWNPHFQWPIBMVPRKEIKDGCQCKSIXQQMBARUXYAVEOGFVIRADTNMBXYTGYOCOFWSBRPOIXLCVZTIERORPCJXGRPHFMTDJEELDNFTLNKWPCJKHGFRVQMDQDQJPRNTTEKGYDVKOQIGIQGLPUHVGRXXTXNASXZSGRZDCSYSECAFPMGYPGOKMYHBQPFDQLTDFMVYTLEFZFANDHODFODLSEEFXVVFECAIQHBHQCOFXXUJURJALLSDVMTFFWFVMURVFGSPOBUAPHECCYEVIUDPXOAAGWPJDGXGFDAXFRAWWJUGQRWAUMKLYFCMIZBECTDTLQCNMSFKOCCBXHUECJHSZGQMGIXDDMQHFMJFOYQANUAGIXWPOFABJVZBFFAJWXDYRQHYHDOCIFLNLUXZIWHYSVHMBSHPQOFKUYYORFCSBSCHICJGBHUHZRPMSIOXOFZTQYSXJYKZYHRFSYUAUXTRXBMZBVGQYDIXPKRWIIUXOAPUSVRVBTWUUWDQMVYTRWTXGUQVGNTPUTFOMPULYNTEMFIBURWTMUGLKFKTRHWQYORCCPZXSQMHMUFUNBTVVQXCJDHEAEOLKIWWDATNPZRKZKHRDLLEOZBNNTKBWCRFYGKUSMVJJQJPLIVRZLCEGWARXPCTWRCYNGXSZKOINBWRFIQMVMBSIWLFAJJOGYFLEQZTRLDKOSRDBJBBGCENERHXNWUHSSTKLCBHLLLWOFGMSQADVTQREFAMBFVKWPQJCQBENHZWNNAGDFPDGWXSZDJWXHIRSOFGUPULDMREIERSMRLIZXRPCTYMHXDMODPKCZSTGUGGBPTOJPTKYMQQEJQAJCAJRTLVEAWWJSMFSOMIPICKCQASTJKHFLWFDNMZWFWCDTSDYVFFVTYQAXWKLCNKLNVYXQPUOOLHUMMNYRTYROGQKBUZPZWNBVDZWEHQRGNAYDPIQQFZWBQJMTZPETCCVRAHCQRMGBMUMJRLCMMRQVEVQRZXNSGVEHDJTFKARJIDYLVUZXCPIZRFBRQYGHCSODWGYBJZASEPRTVYJTRQZKPWABJPZLRYZGTIYXXKUGEPOAGJTFTPDVYYPUAFZKVZMDYMKQUYGSJXBFPBYUXZAGHLVTSUVRPROLTTMRTIOLSWVIDGPUWABDNIMBUJFPXGJALVKIKACLFBLYNUXVOZPLXTGSOXLSOLZAMJBTULOOVQXQEDZBYPEKOMMVRTWPKUYPLPGJPDPEPGRQVWWCGZVCJLMLMSVNAQVCGQJKGUQLZWKRODZVSOHVNORSVXWIIYDZIAOWYRNALTZGQQXONIAYONNUCCEPBTOURSHZMDYDVUEWVOKRDSMWNRIULIKREOSEFNWCZIBHXHAJMWXLPBOMQIHXESUTALQDOPRQOPTEVXPVIIGWPULOEFDXCVGRUTRRUNTKUIZSPWFNUNDZTQXDPPCOSQRXJASFLQJEYTTKSMQPEHJMRJDUUFAQUHGLQEONTXFVHTIKRKCBLVXRLOAVDXMZRVHQKSAZQHBEMQIGQXTTCTDFERABGJORICJQYUGEQCSRYGHOSJXBYMTTKGPNMNTQRMRNKDVWNTBXFZUMZHGJUTCKKPYHLNRJPHTWXWVJTFXJNTZVWQQNZKIVUSQOTFSYGLJANTSZTLWPLMVCZBYLOBQVUIZVPLBYGFAERMWJVWIYZWORLVCXILQNLZYOSEMDUFJNVWQHMLQJQYCACZPRIRMHVCTCOSQDOPEPILXDMFNZBUSHUPUTDNZFZMNCBBMWRROKIXVCIYBEACLYFORTKIRAHNVXIDMCVEFZQYFIWTDEGJFEVJWTCUNTQQPRVMOLMMUZWMLCEJHJHPCJKZAZYWPWWTLOQBUXOQIJJPLEEAVAODLRYHSWYKJIJEWEQCXPLJDYQHSEMRRZIWYDNHQMNBNYFXPYRBEYOUGYKJGKKBLIMKGHZIZXXKDZMWGQYEHQNINKERCUWPVULZLOWRSQXHGNYKESNFIZDVANPXMVMQUKCYRIJRRCZKPWPLNPBIHQAWIJWEGPKHRXAVVRYRIDGWZCVMIIKUTQEBUNNEWBWVHWDYQBMTIIVFBWYWQOHPPBUCKGBUMFEOWXYNWEJKEYJPBUTWLIBJRQULVWSOHHUZYWZOBTYRUAROBWJXZIXTVGLNKKFGAAYRIQLBSVTNRREGIXKHXBMEOMSIDRYEMUFZTMSYZATTGXJLOXPLYJNOJWPIJJSNFXBENJNILQZKDGTVRUCKKTBYMQLDWVZJCTTKEAIVOVPUSNXPAMIZSSTYJQRXWGCHKNUIDRGBKLDQQOEHVEVRLCKQGRFRJWLHURSNBHHLAHJXCHHPAPGKNMERSLFNFAVXHZMGADMKSFPEQWCMNADVYHMHAMZCCZXCSQRUJNMKLWNCOQGRANWRZGWQYPVHNFQOQIXNJMOSSWNXZUZQJULNHZNMYMZDJZFHIVAGUPZYUTRAEROCMXGMMPTZXDDRWMBPVJOWUQUBWUHOKHJBSPVYTVVNIHGNMBHUBZTYCSOVJTKSBRJTAVCILRFUHAWORDCGHODNRMRXHGNPBAMXFADHKAIFEWACDSXLDWAOZQDOOZYAFIEDWOWKSTSWVSKJGMGGPNDRITPAQCKLYACAKXGQMGSFHEZNBWWBCJNXBAPBBMVXNPKDRVZKXGJCXOXUJZZATQERCUHRBTIDGRDTDADKRVLWAWKXOZSWSXGSUDFHINWAYZIVCLLPQAFCYGCVKKUGFUCPTDCBIEFYWDQLZBIWTSMDCWEGHXCEMAVAOGHRBTDPYWVZJAYBRSBBNVMEVJPIDCPPAFOXBOBBYETZUUIMGUIHWYTHROOQUSDHZKLLVQPNNFFZFQTFQNYLKCDZTDIUHKBQYHAQCPGXOQFFFQLEAEBVYCADCBKDWSSPEPFYZVKWLWYGOMJWRFOJQTOZBUXTHMEVNNZBDARRJUREQPZTLZCRSARAMDCESBASPDDCHKHUFFRFHHRWLHIZBARDVXRITNTTRWIABSICXREDKYJMRREBSRYRRUZRUPDYSDBFSHGSJHUEDPBNTSKSLZUTTDUFQLBVQDNMQZTJWUERNMKCRLFOAVHZFXHZBJEVXEIFJAZURGVMBFYJBJQNFXFMOHUZTQSDUELIUOYOGFEZMLYMPJCFJIOLRZSTTWTTWRBZJJDAJQAONMLYZBIEDYUZMQPDGVKEBYTJFEIYTVFTDGDKLDUFLPMXHNSDMPURWXXMEDCZBYBZEIVYDSAMPHIFVWDMHOBLOHUMEZBWZDJKGMRBCNJNWSBATONEBZPLTMMFDGUZWCOAEOXSATWYADHYZQZJNTKMFXUTDCRLLPLHFRZQITITDZTNEYAVUOVSNRVZLODUYMENXVIYNBNHDIVFXTPYCWIWGAGVSYTKMXAAKSWVJWQQUAFOUOJHTBWFBTOXXQFYXYDRSAAFEJGUKVBPNXJUGPBAEBDDPCDXNJVUWDUFJYATVDAEVTGVALAIZNJNOTZVUMPPPEJSDBUHOVLYDVLUTQJRPBJLILDSOCZYZSJFOHYHUFCYDYYTFJWIBIVJUAHCFPJPCDYDFEXBICTGNIIBIGNWDXJIQHDCYFADTJYSDGCHFUVJODFMPPOUPEWQUQFBWHJYPYXNEHKJYDVCTWUKZGNFCMAXWRLXJOVUCGVYYLAHNCNAVRXFAYWLFWEGXOEATKJBQEWDCKXLCYAQGELTISLJNGNDMSDIEGTZDJEIVYGKUITBMTDEQNARMDWBLOSQORWPUKJVJDNASJKSQIGCVHDNWUVCBYUNRSILMPVBBBYZCGEZLXKIBAEFSXOCWGPBKUCANOGYPIMRWQZHQCVMYQGXXBQJQEKMGDZZMZIKBVZVOZUJPWLKBSGGWBOISHEHLWEKRONPVHLWKCECXXLDRVRRDXDOLTPHIKIXUPSCXTRSVBWNQPSQHOBAIFDAJSTYVIDREDDSAHXEUSWAOMMTSGGUKSILWKYMKLHWZAPBMLEVHVWCYPYKQPIHENOTQJNNSIJAVQEUWFFMVZJNCVZMVEJDGUMBWZYNJBOQMAWBVNJXCZNLMUFRJQPWHBAPDQXGUADKOTAWHYQQHRAUFLXRTXNNKXYWZYPCMUVOWBORZGOUZHBVVKYPTHHDCZDRPNKBUKSTAEIOFEBWSREMPCTTZYDUCHYWRLSOBGZOQUZFDZYLWQQSRZMIXHWWRAMGIMUXWOZXCIRMGXPQINXNVEZTZAELZEHNKSERZHEMKRGXBMKJYMDVYAUZYRTNFQEZIBGUVYLKTXCQCNEUSFMGQRUQNMQZEZYDXIMINYFPLYKJBHQKONMZCKTXSVPWYJVUSZBGNFGFETFWYPJOYCOUKTBGCUSAAIEJEMISGJVHAFYKTRELMEZYXELSYWKIKZMTJKQDQRPVPKBNCDXNSKNYMGYCCTXONNMLOATKJSGEPQUWSWRXVZMQTINKXFPBLKIUHSSFEBPSHDVXRJNWZMCQTZFGODTBKFUTWGQCASNARKZVSAJZMWRCHPOXDPTLZVZXBYJVZDYMXUJMAFNARTSKCGZVMHFHOQDNUFTKGOJBJPIIIAKBHPZUFCQGVFUZYKMEIYEZSGDUXDCHDNUJCWDCLFAVSNWHZWWQZHUYWOUSAPXOSOXDVOWQGPUKWBLJGNOQPYOBXFZAMKJCVITKOQGWBTCSFMFJAPXUAENMSGVLXWMPVOIPCGMDQRBPNOJPVRQZCWNYMHFQFHPDLMCZNSWKRWSIWPXPYWVJAAUSFGJQUFGZTCLXGVGRKLMVTPZNCEBLYEKYYXEGVFJSDDFPAUIPISFFEXWJOXHGOYDXCHFASQHCIUGBHRIZKCEZQMYVRWGLUXCPTVMPEWSWYAMSZWDZNFWAAKRRDCKVWQNAFQCTCPBPURDODHWMKJXNAGWYHVNZMVPXHSSDHSATBVZGCXBYCMMZSARMRANMTGMWDFUFNJDVLVEQSVGZCKYFJYCYVBYFXOCQCLZKNCTJXKIJWXXXOXZGTNMDLPEXWTFFHYYGVIGAEQITLKEGBYEHIMTZVLFBQNRFKAXJKMUGDWCNBMSWEIKVGPNXMXIMBBFUWYJWDAZCXICWPXXHCHONTWEAOYJGQWYOKYJXOQTUFKDXZWLDUSCBQCJCSYCWRAEXZPCUKHNCAQQBAVFWUEGKTTKRXDGKAXHFAQQUGUOCYSENIDFINGGKFHRDFSGPRCNRMJSQGLGEAGRYVUEBKNPCHPJARWLVAMWXKLLCIEVGLQURKGELWAVMOEAQPTETSXDIWHTAWUHYDSWPBSBXSMILPGRJOKFWVFRYLLDZSNEODKXLCUBVCPZUMVCRMOKTLZWLUBDFVXDWXJQAFTGWPRHKSJVUHFEECTVSVSQWPFUBKNOEUWBEAYTWZLEBCFSBEHXRDGRVKDTBWBGEFHRWEYGLVOLNNDRVEYZFAKHEMLZNXIKCXOMMMNKKPEDCQAMNPHJZIDPYOFCZSAEXSDKCFADQPFNZOLXXPWHZQXZFEPXKVVZBDNFGOECOEEBGQKZRYZVNRRMACXGCZIKRXZFCPREJDGWDGDQWAUONDVIZUAHGWOEKFHZYFFWYGTTUWTHZMOSHCOAZAUQVGXUDNBDKZXLFRLJOOBBZWCJDOJVRQDZHOKWRGUIYLSXBLOYLVFCQXSGFKKNKCCRUYKHVSMMEGRZQUPOSCPCPXULPVHHDLJVKBZEQXPDELQYHAPNXPODAIXCHDDEZXSNHXFJRVYKYHPWWXIKKADPWHYECYZHRCPETXJRPVCJZTJAMTEVEWBOJJIHLMFEKRSFWOIHDPVWIEDCDCCWFXCUQWMVCSALZCFNSIMPAMPXPFFLJLQMOUKBMJPRCPZKGIIQRWAGDQHMBGRUNWCNPEENIMDFHNIYESXOCNODZHNWGWKDYNLRWVDGDCXZJWJFJAYOYMKGQAUGOUNOBMOXHYXIWXDTRRVZYONYDMCGXRXCSWMTFRHTDEPHAWRSHCFFJHQCOXIKFJDUKZEEFDUVMKIKWQFGEIRDRDCKNOOPZBVSVJMVCEIIHBWLPZCHICDXFYLWOTQNZOUEJRWXGEYUJKXYOHVQHOOLCADPQWCMKDZFCVVKRZOPUMAQYTWTNBLYIPJGZAGAAUZHMBNOAJWGVDUERVYKSCJTDLUZMURSWCBMBCWOMMPRDENOWUVGYCMXGKQAPOJWHVJXDQSTIVXEQQFFHRRRDIYOYPBXCHHASFSQNOXPMECLWXLWDVZNRBZPKQKWXEYBUYJIDSBHXRHANOMYGJLBXQRKXNDAYAKYYYFFYOPYURLNXTWUHZERXDAGNZICBABUDCUHIZOTKPAUUIQCWSXJKHBCYEEGHNWGJYKKNFMYXJOGGBJUFYMZUTQSZBIXQJEWXMLUUBTMPADMKMTPNRHCQZGKJMCEHNECPCNMNBMGLUSTXEYMPRWQSIYOBVQACAYHEGZZBUQAETEGHBNEWWEHJIEEPGHTPLCCWTFTRNGJFDNYZUFAZHROOTIEKQHRDDBOQXMYZMWUPDRCJYBIXGPRVUDAIXJKUSYSSGAOQCOAWXDDDGNRNZQBCOQVLENHJXLWJGVFNKLXUJYEOHJGFAMGDNZCANNYDNWBBZWGYHAPSVUXERUJRQPUUDXJBCQZKJRUFCDNRSRZZLNOCJJRQJORFIBXKCZBZKCVIVZJXMBUCOPUEICSWINZGHNUGLEAZMJRTKBEDIZZZRRCPMDEDKYXLZQOUDPEZVQWAIXDNBQHIRWPBFQRVHHKIWCNQKYEXPLNVMBKZBBSHVWMTRJSWGFTSZLDXSXUCSMPRPIILOXBHSPXZYDDLYUQNCLNFUVVOVPKWOCGGRZOEQAFPFQEFOKMITPTWQOJJQOAFNDYPPWSXVBVLQPDURHSOSUXKIHBICWYECZJWOSESPIERXVOWHVQFFDPSIVWEMCODLUKPJRYVLPZOPLGWAWPCRWSJTQJFHNYVRUKDMWHXNWFWNORKXITBSGQLKOJXONGPCJUHYKSCRBOOCBPBSRNHEHKSIVFHRBKTOVZTYIZPOAJZKJEXUCTUIMFTHNSGIVQTCXACILYTKLFLKBOCXHKLRFCLJMAMUCCOIXLAATDJTAMAVMWLHZXZFRLQMCYUUIVYWCLVSOWMBJFPZDEBSCWMNPLCPVJPLCLNAMLJWXOBZKWVXZUSWDCVEMEYCXKLKTIGXGXAORRISJTFSMYUUKOELSWWZLQWXWTKFIEECPXJXKFFQXGCFCHUHJNOBZHPIELFYLSCCDEKWOVZYWBMNUYZYBTBYKEJUAOLVGHVYSLHGLJKFONWUSRVSKYYIQULSXJDYTWKQZWWMKTJZDAPWXHSYNXFQSABTUULKDWRADFZMUDWNYYSXOFUYJAGWSXHEWLAPPZIYGAVYNOPQQRXGXQBURVMCENONTHCRRJTETDCLKTCDAOMRMJJKSRHBQRDDUUNQTYFGYMKKYOJOZPCTTRUPJBSVUAWDRLAOCRWQUHJIRHOEEUZIUJCSUXZCUDDLJPKIJDKHKBSADRUYGFZOWPUIYEIKMPTCQRHRSERZEYQLCKOYAYRVSKQZXWEDWYHZVQTZSUUMCWNCCIYHZPOTWBJGRAJQYXSEOEXXSOXNJKIHPPOSYVOOTASCHQGKGJKGLYJUOMWPDMXAJAUXCWJIGMFBNRGPYNTODQWFLAMNMDUKFFETUAMQDJBKJELHSYIIOUAGJBWVXIAXEDYZHRJZFDEQKFRCMHKTYCLPZBDMJHSQKDJFTLPAWROLJWGBWMDUIBQCBBULBOQBUELSLXVCMKNKNQJSRGKPVTICAVOQHUGGQKVDLLFJXAVEJEZVTUQHIPZOIMOCMZHGZCWWTBNFTWIZWSMNLENDMKNDVHTOPHRPTKQYMTRMCPBCXFOSASJGBVHNZYPDVOGFBAAACDAWYGFEEJZGYHVICHFTOOFRNQBWFCEXFBMTNWVBYZEZGLQLJWPKGIVMWNFYPCOEGKXXDODGBLOERJQNBTYYZHEXAPQANLKNISBFOAXCMIXTJKHFEALTBWPCZLWTHNQKQFUBORZELFSIKNQNNPCVCMERRLZIZJAAFKKJTAAKTIZAOLEFOLJWVOMSKDWKBKYSMSIOVKNWUVWXRIFMOQLZGEKQXMMSFNKBMRWTOQHQTDMICVKJPBUUAVAQRUZBHRACXSUVHTKNUCZFMXCXWJGSLIMPNGKSLUHTMZSGOHKVYCISVOFHKIQVFFHXFWXHPRRIVQNDYZBIKRHLIHBNAGDFXRTNPAWEIRBSDKGHQIZVVJCWMATJNGJDFWJYAIIAKVCKERNWKWQPAMCEVIGSIAYDBXWWKVBDYIAZLCZLXJNRKCYDWTRSAQRXNMCUKBMZIONMAUOZCYXQCSQIZNGTCMAFEDMHNRBXVAMDONIHHJWUWMKTDNBJLYCOTFAIPXCMFFUDZVUJUJQWHSXQWJZVZSLOCABVMVMXOEXPSTRNVBSUDFVABUTQYTNZDKIMXKUGGSOXODTUITPTDYBXMOJZLDZOPCNDVGQAMBAGURQCXQSUEHZZRDTSCUUNDTEHNFARXAPNHNHLQLPLTVVYYBKEWAOUDTKSMXRQTIDEWVQZCBSHMQWJPFXQWRVDFSQULKVHAEFRABFMAVKJQIHIURRCIOCNFFYKNQUCJPAROWBESUKYEWKLPQGDZFFTKWHBGRXELNCERMJNNDUKVWDTZPSKDMFSGJOOQKBVQRSNLVNCJKEICCRUQTKLBVGYGFLDERSDDSKIRVHYYABZQAKSBUFLQOSLMYWZOKOABPMBFUHWTYGTAGKOMTBNVJGTXDOJRXEVKVADIZODGLXNZESSLLRXNFKJVQKDNIUNJPOFWWZBWSNKQKJMDRWGPCFAWKYKZWUDQCYDSXSYTJVEOVJZOGCNQYOLIMWBFZAJIWOAXENANJVQOLMVLTBFCVHKFGHVSBQUBUGZSXLLSVCVFUXYPPKYRNIXJTAGJMMRQNQYFMRROKIUSIWCWCAPALNMAGGKVQAOXBHOOAVGPZJFXWXGMTLNHPZSM"
    
    // Test Case passed (243.822 seconds).
//    func testGenerate1() {
//        measure {
//             XCTAssertEqual(morganAndString1(a: a, b: b), result)
//        }
//    }
    // Test Case passed ( seconds).
//    func testGenerate2() {
//        measure {
//             XCTAssertEqual(morganAndString2(a: a, b: b), result)
//        }
//    }
    
    // Test Case passed ( seconds).
    func testGenerate2() {
        measure {
             XCTAssertEqual(morganAndString2(a: a, b: b), result)
        }
    }
    
    // Test Case passed ( seconds).
    func testGenerate3() {
        measure {
             XCTAssertEqual(morganAndString3(a: a, b: b), result)
        }
    }
    
    // Test Case passed ( seconds).
    func testGenerate4() {
        measure {
             XCTAssertEqual(morganAndString4(a: a, b: b), result)
        }
    }
    
    // Test Case passed ( seconds).
    func testGenerate5() {
        measure {
             XCTAssertEqual(morganAndString5(a: a, b: b), result)
        }
    }
    
    // Test Case passed ( seconds).
    func testGenerate6() {
        measure {
             XCTAssertEqual(morganAndString6(a: a, b: b), result)
        }
    }
}

MyTests.defaultTestSuite.run()

/*
 "ACA".lexicographicallyPrecedes("YACA")
 ["YACA3"].lexicographicallyPrecedes(["YACA2"]) { (c1, c2) -> Bool in
     print("c1 = \(c1), c2 = \(c2)")
     return c1 <= c2
 }


 let flattenArray = [Array("ABACABA"), Array("ABACABA")].flatMap({ (element: [Character]) -> [Character] in
     print(element)
     return element
 })
 String(flattenArray)
 // AABABACABACABA


 func compare(A: String, B: String) -> Bool {
     return (A+B < B+A)
 }

 func compare2(A: inout [String]) {
     for i in 0..<A.count {
         var j = i + 1
         while j < A.count {
             if A[i] + A[j] >= A[j] + A[i] {
                 let tmp = A[i]
                 A[i] = A[j]
                 A[j] = tmp
             }
             j += 1
         }
     }
 }

 compare(A: "ACA", B: "YACA")
 var A = ["JACK", "DANIEL"]
 //compare2(A: &A)
 print(A)

 func lexsmallest2(A: inout [String]) -> String {
     compare2(A: &A)
     var answer = ""
     for i in 0..<A.count {
         answer += A[i]
     }
     return answer
 }

 lexsmallest2(A: &A)
 // "YAAACAAAYCCACCCAYAAACAAA"

 //func lexSmallest(A: String, B: String) -> Bool {
 //    var S = [A,B]
 //    S.sort { (x, y) -> Bool in
 //        return compare(A: x, B: y)
 //    }
 //    var answer = String()
 //    for x in 0..<max(A.count, B.count) {
 //        answer += x
 //    }
 //    return answer
 //}
 */
