import UIKit

/**
Morgan and a String

Jack and Daniel are friends. Both of them like letters, especially upper-case ones.
They are cutting upper-case letters from newspapers, and each one of them has his collection of letters stored in a stack.

One beautiful day, Morgan visited Jack and Daniel. He saw their collections. He wondered what is the lexicographically minimal string made of those two collections. He can take a letter from a collection only when it is on the top of the stack. Morgan wants to use all of the letters in their collections.

As an example, assume Jack has collected  `a = [A,C,A]` and Daniel has `b = [B,C,F]`. The example shows the top at index 0 for each stack of letters. Assembling the string would go as follows:

 ```
Jack    Daniel    result
----    ------    ------
ACA     BCF
CA      BCF         A
CA      CF          AB
A       CF          ABC
A       CF          ABCA
        F           ABCAC
                    ABCACF
```
Note the choice when there was a tie at CA and CF.

Function Description

Complete the morganAndString function in the editor below. It should return the completed string.

morganAndString has the following parameter(s):

a: a string representing Jack's letters, top at index `0`
b: a string representing Daniel's letters, top at index `0`
Input Format

The first line contains the an integer `t`, the number of test cases.

The next `t` pairs of lines are as follows:
- The first line contains string `a`
- The second line contains string  `b`.

Constraints

 ```
 1 <= T <= 5
 1 <= |a| - |b| <= 10^5
 ```
 `a` and `b`  contain upper-case letters only, ascii[A-Z].
Output Format

Output the lexicographically minimal string `result` for each test case in new line.

Sample Input
```
2
JACK
DANIEL
ABACABA
ABACABA
```
Sample Output
```
DAJACKNIEL
AABABACABACABA
 ```

Explanation

 The first letters to choose from were J and D since they were at the top of the stack. D was chosen, the options then were J and A. A chosen. Then the two stacks have J and N, so J is chosen. (Current string is DAJ) Continuing this way till the end gives us the resulting string.
*/

// Complete the morganAndString function below.

// Lowest solution working
func morganAndString1(a: String, b: String) -> String {
    var A = a
    var B = b
    var result = [String]()
    result.reserveCapacity(a.count + b.count)
    while A.isEmpty == false || B.isEmpty == false {
        if A.first != nil, B.first != nil {
            while A+"a" <= B+"a" {
                // TODO: here is the 1st bottleneck, on equal strings no need to use
                // remove first one by one
                result.append(String(A.removeFirst()))
            }
            while A+"a" > B+"a" {
                // TODO: here is the 2nd bottleneck, on equal strings no need to use
                // remove first one by one
                result.append(String(B.removeFirst()))
            }
        } else if A.isEmpty == false {
            result.append(A)
            break
        } else if B.isEmpty == false {
            result.append(B)
            break
        }
    }
    return result.joined(separator: "")
}

// Fastest solution still in WIP
func morganAndString2(a: String, b: String) -> String {
    let achar = "a"
    let end = CChar(achar)
    guard let A = (a + achar).cString(using: .utf8),
        let B = (b + achar).cString(using: .utf8) else { return ""}
    var result = [CChar]()
    result.reserveCapacity(a.count + b.count)
    var i = 0
    var j = 0
    var pj = 0
    var pi = 0
    while result.count < a.count + b.count {
        if A[i] != end && B[j] != end {
            pi = 0
            while (i + pi) < A.count && A[i + pi] <= B[j] {
                if A[i + pi] == B[j] && (i + pi) > j {
                    let upToA = (i + pi) > a.count ? a.count : i + pi
                    result += A.suffix(from: i).prefix(upTo: upToA)
                    i = upToA

                    let upToB = (j + 1) > b.count ? b.count : j + 1
                    result += B.suffix(from: j).prefix(upTo: upToB)
                    j = upToB

                    pi = 0
                    break
                }
                pi += 1
            }
            pj = 0
            while (j + pj) < B.count && A[i] > B[j + pj] {
                pj += 1
            }
            let upToB = (j + pj) > b.count ? b.count : j + pj
            result += B.suffix(from: j).prefix(upTo: upToB)
            j = upToB

        } else if A[i] != end && B[j] == end {
            result += A.suffix(from: i).prefix(upTo: A.count-1)
            break
        } else if A[i] == end && B[j] != end {
            result += B.suffix(from: j).prefix(upTo: B.count-1)
            break
        }
    }
    let resultStr = String(cString: result, encoding: .ascii) ?? ""
    return String(resultStr.prefix(a.count + b.count))
}

// Another solution with result as string
func morganAndString3(a: String, b: String) -> String {
    var A = a
    var B = b
    var result = String()
    result.reserveCapacity(a.count + b.count)
    while A.isEmpty == false || B.isEmpty == false {
        if A.first != nil, B.first != nil {
            while A+"a" <= B+"a" {
                // TODO: here is the bottleneck, on equal strings no need to use
                // remove first one by one
                result += String(A.removeFirst())
            }

            while A+"a" > B+"a" {
                // TODO: here is the 2nd bottleneck, on equal strings no need to use
                // remove first one by one
                result += String(B.removeFirst())
            }
        } else if A.isEmpty == false {
            result += A
            break
        } else if B.isEmpty == false {
            result += B
            break
        }
    }
    return result
}


// Best solution until now
func morganAndString4(a: String, b: String) -> String {
    var arrayA = Array(a)
    var arrayB = Array(b)
    var result = [String]()
    while arrayA.isEmpty == false || arrayB.isEmpty == false {
        let ca = arrayA.first
        let cb = arrayB.first
        var c : Character? = nil
        if let ca = ca, let cb = cb {
            if ca < cb {
                c = ca
                arrayA.removeFirst()
            }
            else if ca == cb {
                if String(arrayA) <= String(arrayB) {
                    c = ca
                    arrayA.removeFirst()
                }
                else {
                    c = cb
                    arrayB.removeFirst()
                }
            }
            else {
                c = cb
                arrayB.removeFirst()
            }
        }
        else if let ca = ca {
            c = ca
            arrayA.removeFirst()
        }
        else if let cb = cb {
            c = cb
            arrayB.removeFirst()
        }
        if let c = c {
            result.append(String(c))
        }
    }
    return result.joined()
}


morganAndString3(a: "YACA", b: "ACA") == "ACAYACA"
morganAndString3(a: "ACA", b: "YACA") == "ACAYACA"
morganAndString3(a: "YACA", b: "ACA") == "ACAYACA"
morganAndString3(a: "ACA", b: "YACA") == "ACAYACA"
morganAndString3(a: "ACA", b: "ACA") == "AACACA"
morganAndString3(a: "ACA", b: "BCF") == "ABCACF"
morganAndString3(a: "BCF", b: "ACA") == "ABCACF"
morganAndString3(a: "JACK", b: "DANIEL") == "DAJACKNIEL"
morganAndString3(a: "B", b: "A") == "AB"
morganAndString3(a: "ABACABA", b: "ABACABA") == "AABABACABACABA"
morganAndString3(a: "YZZYZYYZZYYZYZZY", b: "ZZYZYYZZYYZYZZY") == "YZZYZYYZZYYZYZZYZYYZZYYZYZZYZZY"
morganAndString3(a: "ZZYZYYZZYYZYZZY", b: "YZZYZYYZZYYZYZZY") == "YZZYZYYZZYYZYZZYZYYZZYYZYZZYZZY"
morganAndString3(a: "ABCBA", b: "BCBA") == "ABBCBACBA"
morganAndString3(a: "DAD", b: "DABC") == "DABCDAD"
morganAndString3(a: "YZYYZYZYY", b: "ZYYZYZYY") == "YZYYZYYZYZYYZYZYY"
morganAndString3(a: "YZYYZYZYY", b: "ZYYZYZYY") == "YZYYZYYZYZYYZYZYY"
                                                //  YZYYZYYZYZY.ZYYZYY
morganAndString3(a: "BBBABB", b: "BBBABA") == "BBBABABBBABB"
morganAndString3(a: "BBBABB", b: "BBBABA") == "BBBABABBBABB"
morganAndString3(a: "AAA", b: "AAA") == "AAAAAA"
morganAndString3(a: "AAA", b: "AAA") == "AAAAAA"
morganAndString3(a: "DAD", b: "DAD") == "DADADD"
morganAndString3(a: "DAD", b: "DAD") == "DADADD"
morganAndString3(a: "BAC", b: "BAB") == "BABABC"
morganAndString3(a: "BAA", b: "BA") == "BAABA"

import XCTest
class MyTests: XCTestCase {
    func testGenerate1() {
        measure {
            XCTAssertEqual(morganAndString1(a: "YACA", b: "ACA"), "ACAYACA")
        }
    }
    func testGenerate2() {
        measure {
            XCTAssertEqual(morganAndString2(a: "YACA", b: "ACA"), "ACAYACA")
        }
    }
    func testGenerate3() {
        measure {
            XCTAssertEqual(morganAndString3(a: "YACA", b: "ACA"), "ACAYACA")
        }
    }
//    func testGenerate() {
//        measure {
            //            XCTAssertEqual(morganAndString1(a: "ACA", b: "YACA"), "ACAYACA")
////            XCTAssertEqual(morganAndString1(a: "ACA", b: "ACA"), "AACACA")
//            XCTAssertEqual(morganAndString1(a: "ACA", b: "BCF"), "ABCACF")
//            XCTAssertEqual(morganAndString1(a: "BCF", b: "ACA"), "ABCACF")
//            XCTAssertEqual(morganAndString1(a: "JACK", b: "DANIEL"), "DAJACKNIEL")
//            XCTAssertEqual(morganAndString1(a: "B", b: "A"), "AB")
//            XCTAssertEqual(morganAndString1(a: "ABACABA", b: "ABACABA"), "AABABACABACABA")
//            XCTAssertEqual(morganAndString1(a: "YZZYZYYZZYYZYZZY", b: "ZZYZYYZZYYZYZZY"), "YZZYZYYZZYYZYZZYZYYZZYYZYZZYZZY")
//            XCTAssertEqual(morganAndString1(a: "ZZYZYYZZYYZYZZY", b: "YZZYZYYZZYYZYZZY"), "YZZYZYYZZYYZYZZYZYYZZYYZYZZYZZY")
//            XCTAssertEqual(morganAndString1(a: "ABCBA", b: "BCBA"), "ABBCBACBA")
//            XCTAssertEqual(morganAndString1(a: "DAD", b: "DABC"), "DABCDAD")
//            XCTAssertEqual(morganAndString1(a: "YZYYZYZYY", b: "ZYYZYZYY"), "YZYYZYYZYZYYZYZYY")
//            XCTAssertEqual(morganAndString1(a: "BBBABB", b: "BBBABA"), "BBBABABBBABB")
//            XCTAssertEqual(morganAndString1(a: "AAA", b: "AAA"), "AAAAAA")
//            XCTAssertEqual(morganAndString1(a: "DAD", b: "DAD"), "DADADD")
//            XCTAssertEqual(morganAndString1(a: "BAC", b: "BAB"), "BABABC")
//            XCTAssertEqual(morganAndString1(a: "BAA", b: "BA"), "BAABA")
// XCTAssertEqual(morganAndString4(a: "EHNYCHTZWXSQQLVTRXTDZWOQDCJSCVQMZBNGYNLYMJVGCGGPZTZAWEZYXDEJAKZTHEIOXRIUFHVPSLQFGSFOBWDPZIXWHXUVMDWUXYIQRQPUOUAQNZSGWKWMGZFMSAAYNEGBEVLSZWUOAVKYITLQRFXZRGCIJUSNLXRDCCSOKJJSWRMGPCOYYWDOADHPWFRDDOSPLJTUFFHWIGJODUIJFMDVQBDQOLDWIPDWKXHEUAQZTBDSAQIPBEMYATVUJFWSYGDPRIWWAKJDDOWUOZINGZTANILADLQNIGXLAAQOZKTFYBMMIZXBMKPYOTUXIZDZJUJJRJGFTWGLEZYEITSEMQXWXOHCKGWMACWEBTCOWNTWHUAERULYXYEVXXIYXJCWKUZIKRKLYEUTZRGAJOHMDKOILCQUZAIJWTOHFYUDIROBNFPUPNHLJXLPYWZTVPOVTEKMRDQSEXKERABUSOFSHPSZBMKIJLGHDCKXTRPJTAWANWMDCOAOGQJGJJQLXLKEOPWYMOWYSQEQVBZTYLDEQDRUYRQXPFTCYHJWEMTGMHSDXOQHDYMJELCXTMLSDRSICVIJYCONYHYJWYNHATQILCWSBQRYEAMEYQFQESNBGOKUUDJQKZMMTOMJGZPWMMNUVKXWSQIINRPJXBYQENUOWKJXOZLGPVZISIFWYBCUQRDDNLUCTVRPDIOEERWQVESZOOSOBJBJCGOLSZPNRNALICUQUVZHSISJSICGZKZXGMNJCRWJNAEMRFIKVEMMVTSLBMSLWUJSELZGMASAAXJLGIPMINUCINHJLWFQKFJIPTYKYXUSGCAKRRYXDWGAPTFHXINNHHCVQKHEGSWDYUOWGIWBLKNHMVADYRBCMLOUYRFUATLRWNVYRYNEYLPGDFIDGMFKCFXPCPDPGZOGICCOVRHASWPZRCDGIEYWNPHFQWPIBMVPRKEIKDGCQCKSIXQQMBARUXYAVEOGFVIRADTNMBXYTGYOCOFWSBRPOIXLCVZTIERORPCJXGRPHFMTDJEELDNFTLNKWPCJKHGFRVQMDQDQJPRNTTEKGYDVKOQIGIQGLPUHVGRXXTXNASXZSGRZDCSYSECAFPMGYPGOKMYHBQPFDQLTDFMVYTLEFZFANDHODFODLSEEFXVVFECAIQHBHQCOFXXUJURJALLSDVMTFFWFVMURVFGSPOBUAPHECCYEVIUDPXOAAGWPJDGXGFDAXFRAWWJUGQRWAUMKLYFCMIZBECTDTLQCNMSFKOCCBXHUECJHSZGQMGIXDDMQHFMJFOYQANUAGIXWPOFABJVZBFFAJWXDYRQHYHDOCIFLNLUXZIWHYSVHMBSHPQOFKUYYORFCSBSCHICJGBHUHZRPMSIOXOFZTQYSXJYKZYHRFSYUAUXTRXBMZBVGQYDIXPKRWIIUXOAPUSVRVBTWUUWDQMVYTRWTXGUQVGNTPUTFOMPULYNTEMFIBURWTMUGLKFKTRHWQYORCCPZXSQMHMUFUNBTVVQXCJDHEAEOLKIWWDATNPZRKZKHRDLLEOZBNNTKBWCRFYGKUSMVJJQJPLIVRZLCEGWARXPCTWRCYNGXSZKOINBWRFIQMVMBSIWLFAJJOGYFLEQZTRLDKOSRDBJBBGCENERHXNWUHSSTKLCBHLLLWOFGMSQADVTQREFAMBFVKWPQJCQBENHZWNNAGDFPDGWXSZDJWXHIRSOFGUPULDMREIERSMRLIZXRPCTYMHXDMODPKCZSTGUGGBPTOJPTKYMQQEJQAJCAJRTLVEAWWJSMFSOMIPICKCQASTJKHFLWFDNMZWFWCDTSDYVFFVTYQAXWKLCNKLNVYXQPUOOLHUMMNYRTYROGQKBUZPZWNBVDZWEHQRGNAYDPIQQFZWBQJMTZPETCCVRAHCQRMGBMUMJRLCMMRQVEVQRZXNSGVEHDJTFKARJIDYLVUZXCPIZRFBRQYGHCSODWGYBJZASEPRTVYJTRQZKPWABJPZLRYZGTIYXXKUGEPOAGJTFTPDVYYPUAFZKVZMDYMKQUYGSJXBFPBYUXZAGHLVTSUVRPROLTTMRTIOLSWVIDGPUWABDNIMBUJFPXGJALVKIKACLFBLYNUXVOZPLXTGSOXLSOLZAMJBTULOOVQXQEDZBYPEKOMMVRTWPKUYPLPGJPDPEPGRQVWWCGZVCJLMLMSVNAQVCGQJKGUQLZWKRODZVSOHVNORSVXWIIYDZIAOWYRNALTZGQQXONIAYONNUCCEPBTOURSHZMDYDVUEWVOKRDSMWNRIULIKREOSEFNWCZIBHXHAJMWXLPBOMQIHXESUTALQDOPRQOPTEVXPVIIGWPULOEFDXCVGRUTRRUNTKUIZSPWFNUNDZTQXDPPCOSQRXJASFLQJEYTTKSMQPEHJMRJDUUFAQUHGLQEONTXFVHTIKRKCBLVXRLOAVDXMZRVHQKSAZQHBEMQIGQXTTCTDFERABGJORICJQYUGEQCSRYGHOSJXBYMTTKGPNMNTQRMRNKDVWNTBXFZUMZHGJUTCKKPYHLNRJPHTWXWVJTFXJNTZVWQQNZKIVUSQOTFSYGLJANTSZTLWPLMVCZBYLOBQVUIZVPLBYGFAERMWJVWIYZWORLVCXILQNLZYOSEMDUFJNVWQHMLQJQYCACZPRIRMHVCTCOSQDOPEPILXDMFNZBUSHUPUTDNZFZMNCBBMWRROKIXVCIYBEACLYFORTKIRAHNVXIDMCVEFZQYFIWTDEGJFEVJWTCUNTQQPRVMOLMMUZWMLCEJHJHPCJKZAZYWPWWTLOQBUXOQIJJPLEEAVAODLRYHSWYKJIJEWEQCXPLJDYQHSEMRRZIWYDNHQMNBNYFXPYRBEYOUGYKJGKKBLIMKGHZIZXXKDZMWGQYEHQNINKERCUWPVULZLOWRSQXHGNYKESNFIZDVANPXMVMQUKCYRIJRRCZKPWPLNPBIHQAWIJWEGPKHRXAVVRYRIDGWZCVMIIKUTQEBUNNEWBWVHWDYQBMTIIVFBWYWQOHPPBUCKGBUMFEOWXYNWEJKEYJPBUTWLIBJRQULVWSOHHUZYWZOBTYRUAROBWJXZIXTVGLNKKFGAAYRIQLBSVTNRREGIXKHXBMEOMSIDRYEMUFZTMSYZATTGXJLOXPLYJNOJWPIJJSNFXBENJNILQZKDGTVRUCKKTBYMQLDWVZJCTTKEAIVOVPUSNXPAMIZSSTYJQRXWGCHKNUIDRGBKLDQQOEHVEVRLCKQGRFRJWLHURSNBHHLAHJXCHHPAPGKNMERSLFNFAVXHZMGADMKSFPEQWCMNADVYHMHAMZCCZXCSQRUJNMKLWNCOQGRANWRZGWQYPVHNFQOQIXNJMOSSWNXZUZQJULNHZNMYMZDJZFHIVAGUPZYUTRAEROCMXGMMPTZXDDRWMBPVJOWUQUBWUHOKHJBSPVYTVVNIHGNMBHUBZTYCSOVJTKSBRJTAVCILRFUHAWORDCGHODNRMRXHGNPBAMXFADHKAIFEWACDSXLDWAOZQDOOZYAFIEDWOWKSTSWVSKJGMGGPNDRITPAQCKLYACAKXGQMGSFHEZNBWWBCJNXBAPBBMVXNPKDRVZKXGJCXOXUJZZMZIKBVZVOZUJPWLKBSGGWBOISHEHLWEKRONPVHLWKCECXXLDRVRRDXDOLTPHIKIXUPSCXTRSVBWNQPSQHOBAIFDAJSTYVIDREDDSAHXEUSWAOMMTSGGUKSILWKYMKLHWZAPBMLEVHVWCYPYKQPIHENOTQJNNSIJAVQEUWFFMVZJNCVZMVEJDGUMBWZYNJBOQMAWBVNJXCZNLMUFRJQPWHBAPDQXGUADKOTAWHYQQHRAUFLXRTXNNKXYWZYPCMUVOWBORZGOUZHBVVKYPTHHDCZDRPNKBUKSTAEIOFEBWSREMPCTTZYDUCHYWRLSOBGZOQUZFDZYLWQQSRZMIXHWWRAMGIMUXWOZXCIRMGXPQINXNVEZTZAELZEHNKSERZHEMKRGXBMKJYMDVYAUZYRTNFQEZIBGUVYLKTXCQCNEUSFMGQRUQNMQZEZYDXIMINYFPLYKJBHQKONMZCKTXSVPWYJVUSZBGNFGFETFWYPJOYCOUKTBGCUSAAIEJEMISGJVHAFYKTRELMEZYXELSYWKIKZMTJKQDQRPVPKBNCDXNSKNYMGYCCTXONNMLOATKJSGEPQUWSWRXVZMQTINKXFPBLKIUHSSFEBPSHDVXRJNWZMCQTZFGODTBKFUTWGQCASNARKZVSAJZMWRCHPOXDPTLZVZXBYJVZDYMXUJMAFNARTSKCGZVMHFHOQDNUFTKGOJBJPIIIAKBHPZUFCQGVFUZYKMEIYEZSGDUXDCHDNUJCWDCLFAVSNWHZWWQZHUYWOUSAPXOSOXDVOWQGPUKWBLJGNOQPYOBXFZAMKJCVITKOQGWBTCSFMFJAPXUAENMSGVLXWMPVOIPCGMDQRBPNOJPVRQZCWNYMHFQFHPDLMCZNSWKRWSIWPXPYWVJAAUSFGJQUFGZTCLXGVGRKLMVTPZNCEBLYEKYYXEGVFJSDDFPAUIPISFFEXWJOXHGOYDXCHFASQHCIUGBHRIZKCEZQMYVRWGLUXCPTVMPEWSWYAMSZWDZNFWAAKRRDCKVWQNAFQCTCPBPURDODHWMKJXNAGWYHVNZMVPXHSSDHSATBVZGCXBYCMMZSARMRANMTGMWDFUFNJDVLVEQSVGZCKYFJYCYVBYFXOCQCLZKNCTJXKIJWXXXOXZGTNMDLPEXWTFFHYYGVIGAEQITLKEGBYEHIMTZVLFBQNRFKAXJKMUGDWCNBMSWEIKVGPNXMXIMBBFUWYJWDAZCXICWPXXHCHONTWEAOYJGQWYOKYJXOQTUFKDXZWLDUSCBQCJCSYCWRAEXZPCUKHNCAQQBAVFWUEGKTTKRXDGKAXHFAQQUGUOCYSENIDFINGGKFHRDFSGPRCNRMJSQGLGEAGRYVUEBKNPCHPJARWLVAMWXKLLCIEVGLQURKGELWAVMOEAQPTETSXDIWHTAWUHYDSWPBSBXSMILPGRJOKFWVFRYLLDZSNEODKXLCUBVCPZUMVCRMOKTLZWLUBDFVXDWXJQAFTGWPRHKSJVUHFEECTVSVSQWPFUBKNOEUWBEAYTWZLEBCFSBEHXRDGRVKDTBWBGEFHRWEYGLVOLNNDRVEYZFAKHEMLZNXIKCXOMMMNKKPEDCQAMNPHJZIDPYOFCZSAEXSDKCFADQPFNZOLXXPWHZQXZFEPXKVVZBDNFGOECOEEBGQKZRYZVNRRMACXGCZIKRXZFCPREJDGWDGDQWAUONDVIZUAHGWOEKFHZYFFWYGTTUWTHZMOSHCOAZAUQVGXUDNBDKZXLFRLJOOBBZWCJDOJVRQDZHOKWRGUIYLSXBLOYLVFCQXSGFKKNKCCRUYKHVSMMEGRZQUPOSCPCPXULPVHHDLJVKBZEQXPDELQYHAPNXPODAIXCHDDEZXSNHXFJRVYKYHPWWXIKKADPWHYECYZHRCPETXJRPVCJZTJAMTEVEWBOJJIHLMFEKRSFWOIHDPVWIEDCDCCWFXCUQWMVCSALZCFNSIMPAMPXPFFLJLQMOUKBMJPRCPZKGIIQRWAGDQHMBGRUNWCNPEENIMDFHNIYESXOCNODZHNWGWKDYNLRWVDGDCXZJWJFJAYOYMKGQAUGOUNOBMOXHYXIWXDTRRVZYONYDMCGXRXCSWMTFRHTDEPHAWRSHCFFJHQCOXIKFJDUKZEEFDUVMKIKWQFGEIRDRDCKNOOPZBVSVJMVCEIIHBWLPZCHICDXFYLWOTQNZOUEJRWXGEYUJKXYOHVQHOOLCADPQWCMKDZFCVVKRZOPUMAQYTWTNBLYIPJGZAGAAUZHMBNOAJWGVDUERVYKSCJTDLUZMURSWCBMBCWOMMPRDENOWUVGYCMXGKQAPOJWHVJXDQSTIVXEQQFFHRRRDIYOYPBXCHHASFSQNOXPMECLWXLWDVZNRBZPKQKWXEYBUYJIDSBHXRHANOMYGJLBXQRKXNDAYAKYYYFFYOPYURLNXTWUHZERXDAGNZICBABUDCUHIZOTKPAUUIQCWSXJKHBCYEEGHNWGJYKKNFMYXJOGGBJUFYMZUTQSZBIXQJEWXMLUUBTMPADMKMTPNRHCQZGKJMCEHNECPCNMNBMGLUSTXEYMPRWQSIYOBVQACAYHEGZZBUQAETEGHBNEWWEHJIEEPGHTPLCCWTFTRNGJFDNYZUFAZHROOTIEKQHRDDBOQXMYZMWUPDRCJYBIXGPRVUDAIXJKUSYSSGAOQCOAWXDDDGNRNZQBCOQVLENHJXLWJGVFNKLXUJYEOHJGFAMGDNZCANNYDNWBBZWGYHAPSVUXERUJRQPUUDXJBCQZKJRUFCDNRSRZZLNOCJJRQJORFIBXKCZBZKCVIVZJXMBUCOPUEICSWINZGHNUGLEAZMJRTKBEDI",
//            b:
//            "XTGNVWTPXMSKFJVFTKRLYSUHJHDDYHWWRNPMUEJDLUZIOYQGPDSHYIFPXPCFWRLTGMNWVETLCHLZCGIFAKGUQNCTISRVHHAJZZATQERCUHRBTIDGRDTDADKRVLWAWKXOZSWSXGSUDFHINWAYZIVCLLPQAFCYGCVKKUGFUCPTDCBIEFYWDQLZBIWTSMDCWEGHXCEMAVAOGHRBTDPYWVZJAYBRSBBNVMEVJPIDCPPAFOXBOBBYETZUUIMGUIHWYTHROOQUSDHZKLLVQPNNFFZFQTFQNYLKCDZTDIUHKBQYHAQCPGXOQFFFQLEAEBVYCADCBKDWSSPEPFYZVKWLWYGOMJWRFOJQTOZBUXTHMEVNNZBDARRJUREQPZTLZCRSARAMDCESBASPDDCHKHUFFRFHHRWLHIZBARDVXRITNTTRWIABSICXREDKYJMRREBSRYRRUZRUPDYSDBFSHGSJHUEDPBNTSKSLZUTTDUFQLBVQDNMQZTJWUERNMKCRLFOAVHZFXHZBJEVXEIFJAZURGVMBFYJBJQNFXFMOHUZTQSDUELIUOYOGFEZMLYMPJCFJIOLRZSTTWTTWRBZJJDAJQAONMLYZBIEDYUZMQPDGVKEBYTJFEIYTVFTDGDKLDUFLPMXHNSDMPURWXXMEDCZBYBZEIVYDSAMPHIFVWDMHOBLOHUMEZBWZDJKGMRBCNJNWSBATONEBZPLTMMFDGUZWCOAEOXSATWYADHYZQZJNTKMFXUTDCRLLPLHFRZQITITDZTNEYAVUOVSNRVZLODUYMENXVIYNBNHDIVFXTPYCWIWGAGVSYTKMXAAKSWVJWQQUAFOUOJHTBWFBTOXXQFYXYDRSAAFEJGUKVBPNXJUGPBAEBDDPCDXNJVUWDUFJYATVDAEVTGVALAIZNJNOTZVUMPPPEJSDBUHOVLYDVLUTQJRPBJLILDSOCZYZSJFOHYHUFCYDYYTFJWIBIVJUAHCFPJPCDYDFEXBICTGNIIBIGNWDXJIQHDCYFADTJYSDGCHFUVJODFMPPOUPEWQUQFBWHJYPYXNEHKJYDVCTWUKZGNFCMAXWRLXJOVUCGVYYLAHNCNAVRXFAYWLFWEGXOEATKJBQEWDCKXLCYAQGELTISLJNGNDMSDIEGTZDJEIVYGKUITBMTDEQNARMDWBLOSQORWPUKJVJDNASJKSQIGCVHDNWUVCBYUNRSILMPVBBBYZCGEZLXKIBAEFSXOCWGPBKUCANOGYPIMRWQZHQCVMYQGXXBQJQEKMGDZZZRRCPMDEDKYXLZQOUDPEZVQWAIXDNBQHIRWPBFQRVHHKIWCNQKYEXPLNVMBKZBBSHVWMTRJSWGFTSZLDXSXUCSMPRPIILOXBHSPXZYDDLYUQNCLNFUVVOVPKWOCGGRZOEQAFPFQEFOKMITPTWQOJJQOAFNDYPPWSXVBVLQPDURHSOSUXKIHBICWYECZJWOSESPIERXVOWHVQFFDPSIVWEMCODLUKPJRYVLPZOPLGWAWPCRWSJTQJFHNYVRUKDMWHXNWFWNORKXITBSGQLKOJXONGPCJUHYKSCRBOOCBPBSRNHEHKSIVFHRBKTOVZTYIZPOAJZKJEXUCTUIMFTHNSGIVQTCXACILYTKLFLKBOCXHKLRFCLJMAMUCCOIXLAATDJTAMAVMWLHZXZFRLQMCYUUIVYWCLVSOWMBJFPZDEBSCWMNPLCPVJPLCLNAMLJWXOBZKWVXZUSWDCVEMEYCXKLKTIGXGXAORRISJTFSMYUUKOELSWWZLQWXWTKFIEECPXJXKFFQXGCFCHUHJNOBZHPIELFYLSCCDEKWOVZYWBMNUYZYBTBYKEJUAOLVGHVYSLHGLJKFONWUSRVSKYYIQULSXJDYTWKQZWWMKTJZDAPWXHSYNXFQSABTUULKDWRADFZMUDWNYYSXOFUYJAGWSXHEWLAPPZIYGAVYNOPQQRXGXQBURVMCENONTHCRRJTETDCLKTCDAOMRMJJKSRHBQRDDUUNQTYFGYMKKYOJOZPCTTRUPJBSVUAWDRLAOCRWQUHJIRHOEEUZIUJCSUXZCUDDLJPKIJDKHKBSADRUYGFZOWPUIYEIKMPTCQRHRSERZEYQLCKOYAYRVSKQZXWEDWYHZVQTZSUUMCWNCCIYHZPOTWBJGRAJQYXSEOEXXSOXNJKIHPPOSYVOOTASCHQGKGJKGLYJUOMWPDMXAJAUXCWJIGMFBNRGPYNTODQWFLAMNMDUKFFETUAMQDJBKJELHSYIIOUAGJBWVXIAXEDYZHRJZFDEQKFRCMHKTYCLPZBDMJHSQKDJFTLPAWROLJWGBWMDUIBQCBBULBOQBUELSLXVCMKNKNQJSRGKPVTICAVOQHUGGQKVDLLFJXAVEJEZVTUQHIPZOIMOCMZHGZCWWTBNFTWIZWSMNLENDMKNDVHTOPHRPTKQYMTRMCPBCXFOSASJGBVHNZYPDVOGFBAAACDAWYGFEEJZGYHVICHFTOOFRNQBWFCEXFBMTNWVBYZEZGLQLJWPKGIVMWNFYPCOEGKXXDODGBLOERJQNBTYYZHEXAPQANLKNISBFOAXCMIXTJKHFEALTBWPCZLWTHNQKQFUBORZELFSIKNQNNPCVCMERRLZIZJAAFKKJTAAKTIZAOLEFOLJWVOMSKDWKBKYSMSIOVKNWUVWXRIFMOQLZGEKQXMMSFNKBMRWTOQHQTDMICVKJPBUUAVAQRUZBHRACXSUVHTKNUCZFMXCXWJGSLIMPNGKSLUHTMZSGOHKVYCISVOFHKIQVFFHXFWXHPRRIVQNDYZBIKRHLIHBNAGDFXRTNPAWEIRBSDKGHQIZVVJCWMATJNGJDFWJYAIIAKVCKERNWKWQPAMCEVIGSIAYDBXWWKVBDYIAZLCZLXJNRKCYDWTRSAQRXNMCUKBMZIONMAUOZCYXQCSQIZNGTCMAFEDMHNRBXVAMDONIHHJWUWMKTDNBJLYCOTFAIPXCMFFUDZVUJUJQWHSXQWJZVZSLOCABVMVMXOEXPSTRNVBSUDFVABUTQYTNZDKIMXKUGGSOXODTUITPTDYBXMOJZLDZOPCNDVGQAMBAGURQCXQSUEHZZRDTSCUUNDTEHNFARXAPNHNHLQLPLTVVYYBKEWAOUDTKSMXRQTIDEWVQZCBSHMQWJPFXQWRVDFSQULKVHAEFRABFMAVKJQIHIURRCIOCNFFYKNQUCJPAROWBESUKYEWKLPQGDZFFTKWHBGRXELNCERMJNNDUKVWDTZPSKDMFSGJOOQKBVQRSNLVNCJKEICCRUQTKLBVGYGFLDERSDDSKIRVHYYABZQAKSBUFLQOSLMYWZOKOABPMBFUHWTYGTAGKOMTBNVJGTXDOJRXEVKVADIZODGLXNZESSLLRXNFKJVQKDNIUNJPOFWWZBWSNKQKJMDRWGPCFAWKYKZWUDQCYDSXSYTJVEOVJZOGCNQYOLIMWBFZAJIWOAXENANJVQOLMVLTBFCVHKFGHVSBQUBUGZSXLLSVCVFUXYPPKYRNIXJTAGJMMRQNQYFMRROKIUSIWCWCAPALNMAGGKVQAOXBHOOAVGPZJFXWXGMTLNHPZSM"),
//
//            "EHNXTGNVWTPXMSKFJVFTKRLYCHTYSUHJHDDYHWWRNPMUEJDLUZIOYQGPDSHYIFPXPCFWRLTGMNWVETLCHLZCGIFAKGUQNCTISRVHHAJZWXSQQLVTRXTDZWOQDCJSCVQMZBNGYNLYMJVGCGGPZTZAWEZYXDEJAKZTHEIOXRIUFHVPSLQFGSFOBWDPZIXWHXUVMDWUXYIQRQPUOUAQNZSGWKWMGZFMSAAYNEGBEVLSZWUOAVKYITLQRFXZRGCIJUSNLXRDCCSOKJJSWRMGPCOYYWDOADHPWFRDDOSPLJTUFFHWIGJODUIJFMDVQBDQOLDWIPDWKXHEUAQZTBDSAQIPBEMYATVUJFWSYGDPRIWWAKJDDOWUOZINGZTANILADLQNIGXLAAQOZKTFYBMMIZXBMKPYOTUXIZDZJUJJRJGFTWGLEZYEITSEMQXWXOHCKGWMACWEBTCOWNTWHUAERULYXYEVXXIYXJCWKUZIKRKLYEUTZRGAJOHMDKOILCQUZAIJWTOHFYUDIROBNFPUPNHLJXLPYWZTVPOVTEKMRDQSEXKERABUSOFSHPSZBMKIJLGHDCKXTRPJTAWANWMDCOAOGQJGJJQLXLKEOPWYMOWYSQEQVBZTYLDEQDRUYRQXPFTCYHJWEMTGMHSDXOQHDYMJELCXTMLSDRSICVIJYCONYHYJWYNHATQILCWSBQRYEAMEYQFQESNBGOKUUDJQKZMMTOMJGZPWMMNUVKXWSQIINRPJXBYQENUOWKJXOZLGPVZISIFWYBCUQRDDNLUCTVRPDIOEERWQVESZOOSOBJBJCGOLSZPNRNALICUQUVZHSISJSICGZKZXGMNJCRWJNAEMRFIKVEMMVTSLBMSLWUJSELZGMASAAXJLGIPMINUCINHJLWFQKFJIPTYKYXUSGCAKRRYXDWGAPTFHXINNHHCVQKHEGSWDYUOWGIWBLKNHMVADYRBCMLOUYRFUATLRWNVYRYNEYLPGDFIDGMFKCFXPCPDPGZOGICCOVRHASWPZRCDGIEYWNPHFQWPIBMVPRKEIKDGCQCKSIXQQMBARUXYAVEOGFVIRADTNMBXYTGYOCOFWSBRPOIXLCVZTIERORPCJXGRPHFMTDJEELDNFTLNKWPCJKHGFRVQMDQDQJPRNTTEKGYDVKOQIGIQGLPUHVGRXXTXNASXZSGRZDCSYSECAFPMGYPGOKMYHBQPFDQLTDFMVYTLEFZFANDHODFODLSEEFXVVFECAIQHBHQCOFXXUJURJALLSDVMTFFWFVMURVFGSPOBUAPHECCYEVIUDPXOAAGWPJDGXGFDAXFRAWWJUGQRWAUMKLYFCMIZBECTDTLQCNMSFKOCCBXHUECJHSZGQMGIXDDMQHFMJFOYQANUAGIXWPOFABJVZBFFAJWXDYRQHYHDOCIFLNLUXZIWHYSVHMBSHPQOFKUYYORFCSBSCHICJGBHUHZRPMSIOXOFZTQYSXJYKZYHRFSYUAUXTRXBMZBVGQYDIXPKRWIIUXOAPUSVRVBTWUUWDQMVYTRWTXGUQVGNTPUTFOMPULYNTEMFIBURWTMUGLKFKTRHWQYORCCPZXSQMHMUFUNBTVVQXCJDHEAEOLKIWWDATNPZRKZKHRDLLEOZBNNTKBWCRFYGKUSMVJJQJPLIVRZLCEGWARXPCTWRCYNGXSZKOINBWRFIQMVMBSIWLFAJJOGYFLEQZTRLDKOSRDBJBBGCENERHXNWUHSSTKLCBHLLLWOFGMSQADVTQREFAMBFVKWPQJCQBENHZWNNAGDFPDGWXSZDJWXHIRSOFGUPULDMREIERSMRLIZXRPCTYMHXDMODPKCZSTGUGGBPTOJPTKYMQQEJQAJCAJRTLVEAWWJSMFSOMIPICKCQASTJKHFLWFDNMZWFWCDTSDYVFFVTYQAXWKLCNKLNVYXQPUOOLHUMMNYRTYROGQKBUZPZWNBVDZWEHQRGNAYDPIQQFZWBQJMTZPETCCVRAHCQRMGBMUMJRLCMMRQVEVQRZXNSGVEHDJTFKARJIDYLVUZXCPIZRFBRQYGHCSODWGYBJZASEPRTVYJTRQZKPWABJPZLRYZGTIYXXKUGEPOAGJTFTPDVYYPUAFZKVZMDYMKQUYGSJXBFPBYUXZAGHLVTSUVRPROLTTMRTIOLSWVIDGPUWABDNIMBUJFPXGJALVKIKACLFBLYNUXVOZPLXTGSOXLSOLZAMJBTULOOVQXQEDZBYPEKOMMVRTWPKUYPLPGJPDPEPGRQVWWCGZVCJLMLMSVNAQVCGQJKGUQLZWKRODZVSOHVNORSVXWIIYDZIAOWYRNALTZGQQXONIAYONNUCCEPBTOURSHZMDYDVUEWVOKRDSMWNRIULIKREOSEFNWCZIBHXHAJMWXLPBOMQIHXESUTALQDOPRQOPTEVXPVIIGWPULOEFDXCVGRUTRRUNTKUIZSPWFNUNDZTQXDPPCOSQRXJASFLQJEYTTKSMQPEHJMRJDUUFAQUHGLQEONTXFVHTIKRKCBLVXRLOAVDXMZRVHQKSAZQHBEMQIGQXTTCTDFERABGJORICJQYUGEQCSRYGHOSJXBYMTTKGPNMNTQRMRNKDVWNTBXFZUMZHGJUTCKKPYHLNRJPHTWXWVJTFXJNTZVWQQNZKIVUSQOTFSYGLJANTSZTLWPLMVCZBYLOBQVUIZVPLBYGFAERMWJVWIYZWORLVCXILQNLZYOSEMDUFJNVWQHMLQJQYCACZPRIRMHVCTCOSQDOPEPILXDMFNZBUSHUPUTDNZFZMNCBBMWRROKIXVCIYBEACLYFORTKIRAHNVXIDMCVEFZQYFIWTDEGJFEVJWTCUNTQQPRVMOLMMUZWMLCEJHJHPCJKZAZYWPWWTLOQBUXOQIJJPLEEAVAODLRYHSWYKJIJEWEQCXPLJDYQHSEMRRZIWYDNHQMNBNYFXPYRBEYOUGYKJGKKBLIMKGHZIZXXKDZMWGQYEHQNINKERCUWPVULZLOWRSQXHGNYKESNFIZDVANPXMVMQUKCYRIJRRCZKPWPLNPBIHQAWIJWEGPKHRXAVVRYRIDGWZCVMIIKUTQEBUNNEWBWVHWDYQBMTIIVFBWYWQOHPPBUCKGBUMFEOWXYNWEJKEYJPBUTWLIBJRQULVWSOHHUZYWZOBTYRUAROBWJXZIXTVGLNKKFGAAYRIQLBSVTNRREGIXKHXBMEOMSIDRYEMUFZTMSYZATTGXJLOXPLYJNOJWPIJJSNFXBENJNILQZKDGTVRUCKKTBYMQLDWVZJCTTKEAIVOVPUSNXPAMIZSSTYJQRXWGCHKNUIDRGBKLDQQOEHVEVRLCKQGRFRJWLHURSNBHHLAHJXCHHPAPGKNMERSLFNFAVXHZMGADMKSFPEQWCMNADVYHMHAMZCCZXCSQRUJNMKLWNCOQGRANWRZGWQYPVHNFQOQIXNJMOSSWNXZUZQJULNHZNMYMZDJZFHIVAGUPZYUTRAEROCMXGMMPTZXDDRWMBPVJOWUQUBWUHOKHJBSPVYTVVNIHGNMBHUBZTYCSOVJTKSBRJTAVCILRFUHAWORDCGHODNRMRXHGNPBAMXFADHKAIFEWACDSXLDWAOZQDOOZYAFIEDWOWKSTSWVSKJGMGGPNDRITPAQCKLYACAKXGQMGSFHEZNBWWBCJNXBAPBBMVXNPKDRVZKXGJCXOXUJZZATQERCUHRBTIDGRDTDADKRVLWAWKXOZSWSXGSUDFHINWAYZIVCLLPQAFCYGCVKKUGFUCPTDCBIEFYWDQLZBIWTSMDCWEGHXCEMAVAOGHRBTDPYWVZJAYBRSBBNVMEVJPIDCPPAFOXBOBBYETZUUIMGUIHWYTHROOQUSDHZKLLVQPNNFFZFQTFQNYLKCDZTDIUHKBQYHAQCPGXOQFFFQLEAEBVYCADCBKDWSSPEPFYZVKWLWYGOMJWRFOJQTOZBUXTHMEVNNZBDARRJUREQPZTLZCRSARAMDCESBASPDDCHKHUFFRFHHRWLHIZBARDVXRITNTTRWIABSICXREDKYJMRREBSRYRRUZRUPDYSDBFSHGSJHUEDPBNTSKSLZUTTDUFQLBVQDNMQZTJWUERNMKCRLFOAVHZFXHZBJEVXEIFJAZURGVMBFYJBJQNFXFMOHUZTQSDUELIUOYOGFEZMLYMPJCFJIOLRZSTTWTTWRBZJJDAJQAONMLYZBIEDYUZMQPDGVKEBYTJFEIYTVFTDGDKLDUFLPMXHNSDMPURWXXMEDCZBYBZEIVYDSAMPHIFVWDMHOBLOHUMEZBWZDJKGMRBCNJNWSBATONEBZPLTMMFDGUZWCOAEOXSATWYADHYZQZJNTKMFXUTDCRLLPLHFRZQITITDZTNEYAVUOVSNRVZLODUYMENXVIYNBNHDIVFXTPYCWIWGAGVSYTKMXAAKSWVJWQQUAFOUOJHTBWFBTOXXQFYXYDRSAAFEJGUKVBPNXJUGPBAEBDDPCDXNJVUWDUFJYATVDAEVTGVALAIZNJNOTZVUMPPPEJSDBUHOVLYDVLUTQJRPBJLILDSOCZYZSJFOHYHUFCYDYYTFJWIBIVJUAHCFPJPCDYDFEXBICTGNIIBIGNWDXJIQHDCYFADTJYSDGCHFUVJODFMPPOUPEWQUQFBWHJYPYXNEHKJYDVCTWUKZGNFCMAXWRLXJOVUCGVYYLAHNCNAVRXFAYWLFWEGXOEATKJBQEWDCKXLCYAQGELTISLJNGNDMSDIEGTZDJEIVYGKUITBMTDEQNARMDWBLOSQORWPUKJVJDNASJKSQIGCVHDNWUVCBYUNRSILMPVBBBYZCGEZLXKIBAEFSXOCWGPBKUCANOGYPIMRWQZHQCVMYQGXXBQJQEKMGDZZMZIKBVZVOZUJPWLKBSGGWBOISHEHLWEKRONPVHLWKCECXXLDRVRRDXDOLTPHIKIXUPSCXTRSVBWNQPSQHOBAIFDAJSTYVIDREDDSAHXEUSWAOMMTSGGUKSILWKYMKLHWZAPBMLEVHVWCYPYKQPIHENOTQJNNSIJAVQEUWFFMVZJNCVZMVEJDGUMBWZYNJBOQMAWBVNJXCZNLMUFRJQPWHBAPDQXGUADKOTAWHYQQHRAUFLXRTXNNKXYWZYPCMUVOWBORZGOUZHBVVKYPTHHDCZDRPNKBUKSTAEIOFEBWSREMPCTTZYDUCHYWRLSOBGZOQUZFDZYLWQQSRZMIXHWWRAMGIMUXWOZXCIRMGXPQINXNVEZTZAELZEHNKSERZHEMKRGXBMKJYMDVYAUZYRTNFQEZIBGUVYLKTXCQCNEUSFMGQRUQNMQZEZYDXIMINYFPLYKJBHQKONMZCKTXSVPWYJVUSZBGNFGFETFWYPJOYCOUKTBGCUSAAIEJEMISGJVHAFYKTRELMEZYXELSYWKIKZMTJKQDQRPVPKBNCDXNSKNYMGYCCTXONNMLOATKJSGEPQUWSWRXVZMQTINKXFPBLKIUHSSFEBPSHDVXRJNWZMCQTZFGODTBKFUTWGQCASNARKZVSAJZMWRCHPOXDPTLZVZXBYJVZDYMXUJMAFNARTSKCGZVMHFHOQDNUFTKGOJBJPIIIAKBHPZUFCQGVFUZYKMEIYEZSGDUXDCHDNUJCWDCLFAVSNWHZWWQZHUYWOUSAPXOSOXDVOWQGPUKWBLJGNOQPYOBXFZAMKJCVITKOQGWBTCSFMFJAPXUAENMSGVLXWMPVOIPCGMDQRBPNOJPVRQZCWNYMHFQFHPDLMCZNSWKRWSIWPXPYWVJAAUSFGJQUFGZTCLXGVGRKLMVTPZNCEBLYEKYYXEGVFJSDDFPAUIPISFFEXWJOXHGOYDXCHFASQHCIUGBHRIZKCEZQMYVRWGLUXCPTVMPEWSWYAMSZWDZNFWAAKRRDCKVWQNAFQCTCPBPURDODHWMKJXNAGWYHVNZMVPXHSSDHSATBVZGCXBYCMMZSARMRANMTGMWDFUFNJDVLVEQSVGZCKYFJYCYVBYFXOCQCLZKNCTJXKIJWXXXOXZGTNMDLPEXWTFFHYYGVIGAEQITLKEGBYEHIMTZVLFBQNRFKAXJKMUGDWCNBMSWEIKVGPNXMXIMBBFUWYJWDAZCXICWPXXHCHONTWEAOYJGQWYOKYJXOQTUFKDXZWLDUSCBQCJCSYCWRAEXZPCUKHNCAQQBAVFWUEGKTTKRXDGKAXHFAQQUGUOCYSENIDFINGGKFHRDFSGPRCNRMJSQGLGEAGRYVUEBKNPCHPJARWLVAMWXKLLCIEVGLQURKGELWAVMOEAQPTETSXDIWHTAWUHYDSWPBSBXSMILPGRJOKFWVFRYLLDZSNEODKXLCUBVCPZUMVCRMOKTLZWLUBDFVXDWXJQAFTGWPRHKSJVUHFEECTVSVSQWPFUBKNOEUWBEAYTWZLEBCFSBEHXRDGRVKDTBWBGEFHRWEYGLVOLNNDRVEYZFAKHEMLZNXIKCXOMMMNKKPEDCQAMNPHJZIDPYOFCZSAEXSDKCFADQPFNZOLXXPWHZQXZFEPXKVVZBDNFGOECOEEBGQKZRYZVNRRMACXGCZIKRXZFCPREJDGWDGDQWAUONDVIZUAHGWOEKFHZYFFWYGTTUWTHZMOSHCOAZAUQVGXUDNBDKZXLFRLJOOBBZWCJDOJVRQDZHOKWRGUIYLSXBLOYLVFCQXSGFKKNKCCRUYKHVSMMEGRZQUPOSCPCPXULPVHHDLJVKBZEQXPDELQYHAPNXPODAIXCHDDEZXSNHXFJRVYKYHPWWXIKKADPWHYECYZHRCPETXJRPVCJZTJAMTEVEWBOJJIHLMFEKRSFWOIHDPVWIEDCDCCWFXCUQWMVCSALZCFNSIMPAMPXPFFLJLQMOUKBMJPRCPZKGIIQRWAGDQHMBGRUNWCNPEENIMDFHNIYESXOCNODZHNWGWKDYNLRWVDGDCXZJWJFJAYOYMKGQAUGOUNOBMOXHYXIWXDTRRVZYONYDMCGXRXCSWMTFRHTDEPHAWRSHCFFJHQCOXIKFJDUKZEEFDUVMKIKWQFGEIRDRDCKNOOPZBVSVJMVCEIIHBWLPZCHICDXFYLWOTQNZOUEJRWXGEYUJKXYOHVQHOOLCADPQWCMKDZFCVVKRZOPUMAQYTWTNBLYIPJGZAGAAUZHMBNOAJWGVDUERVYKSCJTDLUZMURSWCBMBCWOMMPRDENOWUVGYCMXGKQAPOJWHVJXDQSTIVXEQQFFHRRRDIYOYPBXCHHASFSQNOXPMECLWXLWDVZNRBZPKQKWXEYBUYJIDSBHXRHANOMYGJLBXQRKXNDAYAKYYYFFYOPYURLNXTWUHZERXDAGNZICBABUDCUHIZOTKPAUUIQCWSXJKHBCYEEGHNWGJYKKNFMYXJOGGBJUFYMZUTQSZBIXQJEWXMLUUBTMPADMKMTPNRHCQZGKJMCEHNECPCNMNBMGLUSTXEYMPRWQSIYOBVQACAYHEGZZBUQAETEGHBNEWWEHJIEEPGHTPLCCWTFTRNGJFDNYZUFAZHROOTIEKQHRDDBOQXMYZMWUPDRCJYBIXGPRVUDAIXJKUSYSSGAOQCOAWXDDDGNRNZQBCOQVLENHJXLWJGVFNKLXUJYEOHJGFAMGDNZCANNYDNWBBZWGYHAPSVUXERUJRQPUUDXJBCQZKJRUFCDNRSRZZLNOCJJRQJORFIBXKCZBZKCVIVZJXMBUCOPUEICSWINZGHNUGLEAZMJRTKBEDIZZZRRCPMDEDKYXLZQOUDPEZVQWAIXDNBQHIRWPBFQRVHHKIWCNQKYEXPLNVMBKZBBSHVWMTRJSWGFTSZLDXSXUCSMPRPIILOXBHSPXZYDDLYUQNCLNFUVVOVPKWOCGGRZOEQAFPFQEFOKMITPTWQOJJQOAFNDYPPWSXVBVLQPDURHSOSUXKIHBICWYECZJWOSESPIERXVOWHVQFFDPSIVWEMCODLUKPJRYVLPZOPLGWAWPCRWSJTQJFHNYVRUKDMWHXNWFWNORKXITBSGQLKOJXONGPCJUHYKSCRBOOCBPBSRNHEHKSIVFHRBKTOVZTYIZPOAJZKJEXUCTUIMFTHNSGIVQTCXACILYTKLFLKBOCXHKLRFCLJMAMUCCOIXLAATDJTAMAVMWLHZXZFRLQMCYUUIVYWCLVSOWMBJFPZDEBSCWMNPLCPVJPLCLNAMLJWXOBZKWVXZUSWDCVEMEYCXKLKTIGXGXAORRISJTFSMYUUKOELSWWZLQWXWTKFIEECPXJXKFFQXGCFCHUHJNOBZHPIELFYLSCCDEKWOVZYWBMNUYZYBTBYKEJUAOLVGHVYSLHGLJKFONWUSRVSKYYIQULSXJDYTWKQZWWMKTJZDAPWXHSYNXFQSABTUULKDWRADFZMUDWNYYSXOFUYJAGWSXHEWLAPPZIYGAVYNOPQQRXGXQBURVMCENONTHCRRJTETDCLKTCDAOMRMJJKSRHBQRDDUUNQTYFGYMKKYOJOZPCTTRUPJBSVUAWDRLAOCRWQUHJIRHOEEUZIUJCSUXZCUDDLJPKIJDKHKBSADRUYGFZOWPUIYEIKMPTCQRHRSERZEYQLCKOYAYRVSKQZXWEDWYHZVQTZSUUMCWNCCIYHZPOTWBJGRAJQYXSEOEXXSOXNJKIHPPOSYVOOTASCHQGKGJKGLYJUOMWPDMXAJAUXCWJIGMFBNRGPYNTODQWFLAMNMDUKFFETUAMQDJBKJELHSYIIOUAGJBWVXIAXEDYZHRJZFDEQKFRCMHKTYCLPZBDMJHSQKDJFTLPAWROLJWGBWMDUIBQCBBULBOQBUELSLXVCMKNKNQJSRGKPVTICAVOQHUGGQKVDLLFJXAVEJEZVTUQHIPZOIMOCMZHGZCWWTBNFTWIZWSMNLENDMKNDVHTOPHRPTKQYMTRMCPBCXFOSASJGBVHNZYPDVOGFBAAACDAWYGFEEJZGYHVICHFTOOFRNQBWFCEXFBMTNWVBYZEZGLQLJWPKGIVMWNFYPCOEGKXXDODGBLOERJQNBTYYZHEXAPQANLKNISBFOAXCMIXTJKHFEALTBWPCZLWTHNQKQFUBORZELFSIKNQNNPCVCMERRLZIZJAAFKKJTAAKTIZAOLEFOLJWVOMSKDWKBKYSMSIOVKNWUVWXRIFMOQLZGEKQXMMSFNKBMRWTOQHQTDMICVKJPBUUAVAQRUZBHRACXSUVHTKNUCZFMXCXWJGSLIMPNGKSLUHTMZSGOHKVYCISVOFHKIQVFFHXFWXHPRRIVQNDYZBIKRHLIHBNAGDFXRTNPAWEIRBSDKGHQIZVVJCWMATJNGJDFWJYAIIAKVCKERNWKWQPAMCEVIGSIAYDBXWWKVBDYIAZLCZLXJNRKCYDWTRSAQRXNMCUKBMZIONMAUOZCYXQCSQIZNGTCMAFEDMHNRBXVAMDONIHHJWUWMKTDNBJLYCOTFAIPXCMFFUDZVUJUJQWHSXQWJZVZSLOCABVMVMXOEXPSTRNVBSUDFVABUTQYTNZDKIMXKUGGSOXODTUITPTDYBXMOJZLDZOPCNDVGQAMBAGURQCXQSUEHZZRDTSCUUNDTEHNFARXAPNHNHLQLPLTVVYYBKEWAOUDTKSMXRQTIDEWVQZCBSHMQWJPFXQWRVDFSQULKVHAEFRABFMAVKJQIHIURRCIOCNFFYKNQUCJPAROWBESUKYEWKLPQGDZFFTKWHBGRXELNCERMJNNDUKVWDTZPSKDMFSGJOOQKBVQRSNLVNCJKEICCRUQTKLBVGYGFLDERSDDSKIRVHYYABZQAKSBUFLQOSLMYWZOKOABPMBFUHWTYGTAGKOMTBNVJGTXDOJRXEVKVADIZODGLXNZESSLLRXNFKJVQKDNIUNJPOFWWZBWSNKQKJMDRWGPCFAWKYKZWUDQCYDSXSYTJVEOVJZOGCNQYOLIMWBFZAJIWOAXENANJVQOLMVLTBFCVHKFGHVSBQUBUGZSXLLSVCVFUXYPPKYRNIXJTAGJMMRQNQYFMRROKIUSIWCWCAPALNMAGGKVQAOXBHOOAVGPZJFXWXGMTLNHPZSM")

//        }
//    }
}

MyTests.defaultTestSuite.run()
